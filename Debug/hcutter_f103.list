
hcutter_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000154c  08003ae0  08003ae0  00013ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800502c  0800502c  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800502c  0800502c  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800502c  0800502c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800502c  0800502c  0001502c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005030  08005030  00015030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005034  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  20000088  080050bc  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  080050bc  000205a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b37c  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c58  00000000  00000000  0002b42d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  0002d088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  0002dcf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175e7  00000000  00000000  0002e878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d069  00000000  00000000  00045e5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089f89  00000000  00000000  00052ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dce51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003798  00000000  00000000  000dcea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ac8 	.word	0x08003ac8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08003ac8 	.word	0x08003ac8

0800014c <move>:
int state_prog = 0;
int off_state = 0;
int motors_stop = 0;

void move()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000150:	2201      	movs	r2, #1
 8000152:	2101      	movs	r1, #1
 8000154:	4804      	ldr	r0, [pc, #16]	; (8000168 <move+0x1c>)
 8000156:	f001 fd0e 	bl	8001b76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800015a:	2200      	movs	r2, #0
 800015c:	2102      	movs	r1, #2
 800015e:	4802      	ldr	r0, [pc, #8]	; (8000168 <move+0x1c>)
 8000160:	f001 fd09 	bl	8001b76 <HAL_GPIO_WritePin>
}
 8000164:	bf00      	nop
 8000166:	bd80      	pop	{r7, pc}
 8000168:	40010c00 	.word	0x40010c00

0800016c <stop>:
void stop()
{
 800016c:	b580      	push	{r7, lr}
 800016e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000170:	2200      	movs	r2, #0
 8000172:	2101      	movs	r1, #1
 8000174:	4804      	ldr	r0, [pc, #16]	; (8000188 <stop+0x1c>)
 8000176:	f001 fcfe 	bl	8001b76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800017a:	2200      	movs	r2, #0
 800017c:	2102      	movs	r1, #2
 800017e:	4802      	ldr	r0, [pc, #8]	; (8000188 <stop+0x1c>)
 8000180:	f001 fcf9 	bl	8001b76 <HAL_GPIO_WritePin>
}
 8000184:	bf00      	nop
 8000186:	bd80      	pop	{r7, pc}
 8000188:	40010c00 	.word	0x40010c00

0800018c <tube_cutting>:

void tube_cutting()
{
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0
	off_state = 0;
 8000190:	4b61      	ldr	r3, [pc, #388]	; (8000318 <tube_cutting+0x18c>)
 8000192:	2200      	movs	r2, #0
 8000194:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, !(GPIO_PinState)prog_start);
 8000196:	4b61      	ldr	r3, [pc, #388]	; (800031c <tube_cutting+0x190>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	b2db      	uxtb	r3, r3
 800019c:	2b00      	cmp	r3, #0
 800019e:	bf0c      	ite	eq
 80001a0:	2301      	moveq	r3, #1
 80001a2:	2300      	movne	r3, #0
 80001a4:	b2db      	uxtb	r3, r3
 80001a6:	461a      	mov	r2, r3
 80001a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ac:	485c      	ldr	r0, [pc, #368]	; (8000320 <tube_cutting+0x194>)
 80001ae:	f001 fce2 	bl	8001b76 <HAL_GPIO_WritePin>
	if (prog_start)
 80001b2:	4b5a      	ldr	r3, [pc, #360]	; (800031c <tube_cutting+0x190>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d077      	beq.n	80002aa <tube_cutting+0x11e>
	{
		if (state_prog == 0)
 80001ba:	4b5a      	ldr	r3, [pc, #360]	; (8000324 <tube_cutting+0x198>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d10c      	bne.n	80001dc <tube_cutting+0x50>
		{
			move_timer = HAL_GetTick();
 80001c2:	f001 fa2b 	bl	800161c <HAL_GetTick>
 80001c6:	4603      	mov	r3, r0
 80001c8:	4a57      	ldr	r2, [pc, #348]	; (8000328 <tube_cutting+0x19c>)
 80001ca:	6013      	str	r3, [r2, #0]
			move();
 80001cc:	f7ff ffbe 	bl	800014c <move>
			state_prog++;
 80001d0:	4b54      	ldr	r3, [pc, #336]	; (8000324 <tube_cutting+0x198>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	3301      	adds	r3, #1
 80001d6:	4a53      	ldr	r2, [pc, #332]	; (8000324 <tube_cutting+0x198>)
 80001d8:	6013      	str	r3, [r2, #0]
				off_state = 0;
				motors_stop = 1;
			}
		}
	}
}
 80001da:	e09b      	b.n	8000314 <tube_cutting+0x188>
		else if (state_prog == 1)
 80001dc:	4b51      	ldr	r3, [pc, #324]	; (8000324 <tube_cutting+0x198>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	2b01      	cmp	r3, #1
 80001e2:	d122      	bne.n	800022a <tube_cutting+0x9e>
			if (HAL_GetTick() - move_timer > tube_length*30)
 80001e4:	f001 fa1a 	bl	800161c <HAL_GetTick>
 80001e8:	4602      	mov	r2, r0
 80001ea:	4b4f      	ldr	r3, [pc, #316]	; (8000328 <tube_cutting+0x19c>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	1ad1      	subs	r1, r2, r3
 80001f0:	4b4e      	ldr	r3, [pc, #312]	; (800032c <tube_cutting+0x1a0>)
 80001f2:	681a      	ldr	r2, [r3, #0]
 80001f4:	4613      	mov	r3, r2
 80001f6:	011b      	lsls	r3, r3, #4
 80001f8:	1a9b      	subs	r3, r3, r2
 80001fa:	005b      	lsls	r3, r3, #1
 80001fc:	4299      	cmp	r1, r3
 80001fe:	f240 8089 	bls.w	8000314 <tube_cutting+0x188>
				stop();
 8000202:	f7ff ffb3 	bl	800016c <stop>
				move_timer = HAL_GetTick();
 8000206:	f001 fa09 	bl	800161c <HAL_GetTick>
 800020a:	4603      	mov	r3, r0
 800020c:	4a46      	ldr	r2, [pc, #280]	; (8000328 <tube_cutting+0x19c>)
 800020e:	6013      	str	r3, [r2, #0]
				HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000210:	2100      	movs	r1, #0
 8000212:	4847      	ldr	r0, [pc, #284]	; (8000330 <tube_cutting+0x1a4>)
 8000214:	f002 fb64 	bl	80028e0 <HAL_TIM_PWM_Start>
				TIM4->CCR1 = 20;
 8000218:	4b46      	ldr	r3, [pc, #280]	; (8000334 <tube_cutting+0x1a8>)
 800021a:	2214      	movs	r2, #20
 800021c:	635a      	str	r2, [r3, #52]	; 0x34
				state_prog++;
 800021e:	4b41      	ldr	r3, [pc, #260]	; (8000324 <tube_cutting+0x198>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	3301      	adds	r3, #1
 8000224:	4a3f      	ldr	r2, [pc, #252]	; (8000324 <tube_cutting+0x198>)
 8000226:	6013      	str	r3, [r2, #0]
}
 8000228:	e074      	b.n	8000314 <tube_cutting+0x188>
		else if (state_prog == 2)
 800022a:	4b3e      	ldr	r3, [pc, #248]	; (8000324 <tube_cutting+0x198>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	2b02      	cmp	r3, #2
 8000230:	d116      	bne.n	8000260 <tube_cutting+0xd4>
			if (HAL_GetTick() - move_timer > 500)
 8000232:	f001 f9f3 	bl	800161c <HAL_GetTick>
 8000236:	4602      	mov	r2, r0
 8000238:	4b3b      	ldr	r3, [pc, #236]	; (8000328 <tube_cutting+0x19c>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	1ad3      	subs	r3, r2, r3
 800023e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000242:	d967      	bls.n	8000314 <tube_cutting+0x188>
				TIM4->CCR1 = 9;
 8000244:	4b3b      	ldr	r3, [pc, #236]	; (8000334 <tube_cutting+0x1a8>)
 8000246:	2209      	movs	r2, #9
 8000248:	635a      	str	r2, [r3, #52]	; 0x34
				move_timer = HAL_GetTick();
 800024a:	f001 f9e7 	bl	800161c <HAL_GetTick>
 800024e:	4603      	mov	r3, r0
 8000250:	4a35      	ldr	r2, [pc, #212]	; (8000328 <tube_cutting+0x19c>)
 8000252:	6013      	str	r3, [r2, #0]
				state_prog++;
 8000254:	4b33      	ldr	r3, [pc, #204]	; (8000324 <tube_cutting+0x198>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	3301      	adds	r3, #1
 800025a:	4a32      	ldr	r2, [pc, #200]	; (8000324 <tube_cutting+0x198>)
 800025c:	6013      	str	r3, [r2, #0]
}
 800025e:	e059      	b.n	8000314 <tube_cutting+0x188>
		else if (state_prog == 3)
 8000260:	4b30      	ldr	r3, [pc, #192]	; (8000324 <tube_cutting+0x198>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	2b03      	cmp	r3, #3
 8000266:	d155      	bne.n	8000314 <tube_cutting+0x188>
			if (HAL_GetTick() - move_timer > 500)
 8000268:	f001 f9d8 	bl	800161c <HAL_GetTick>
 800026c:	4602      	mov	r2, r0
 800026e:	4b2e      	ldr	r3, [pc, #184]	; (8000328 <tube_cutting+0x19c>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	1ad3      	subs	r3, r2, r3
 8000274:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000278:	d94c      	bls.n	8000314 <tube_cutting+0x188>
				HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 800027a:	2100      	movs	r1, #0
 800027c:	482c      	ldr	r0, [pc, #176]	; (8000330 <tube_cutting+0x1a4>)
 800027e:	f002 fbd1 	bl	8002a24 <HAL_TIM_PWM_Stop>
				state_prog = 0;
 8000282:	4b28      	ldr	r3, [pc, #160]	; (8000324 <tube_cutting+0x198>)
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
				tube_quant--;
 8000288:	4b2b      	ldr	r3, [pc, #172]	; (8000338 <tube_cutting+0x1ac>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	3b01      	subs	r3, #1
 800028e:	4a2a      	ldr	r2, [pc, #168]	; (8000338 <tube_cutting+0x1ac>)
 8000290:	6013      	str	r3, [r2, #0]
				if (tube_quant<=0)
 8000292:	4b29      	ldr	r3, [pc, #164]	; (8000338 <tube_cutting+0x1ac>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	dc3c      	bgt.n	8000314 <tube_cutting+0x188>
					tube_quant = tube_prev_quant;
 800029a:	4b28      	ldr	r3, [pc, #160]	; (800033c <tube_cutting+0x1b0>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a26      	ldr	r2, [pc, #152]	; (8000338 <tube_cutting+0x1ac>)
 80002a0:	6013      	str	r3, [r2, #0]
					prog_start = 0;
 80002a2:	4b1e      	ldr	r3, [pc, #120]	; (800031c <tube_cutting+0x190>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
}
 80002a8:	e034      	b.n	8000314 <tube_cutting+0x188>
	else if (!motors_stop)
 80002aa:	4b25      	ldr	r3, [pc, #148]	; (8000340 <tube_cutting+0x1b4>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d130      	bne.n	8000314 <tube_cutting+0x188>
		state_prog = 0;
 80002b2:	4b1c      	ldr	r3, [pc, #112]	; (8000324 <tube_cutting+0x198>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
		if (off_state == 0)
 80002b8:	4b17      	ldr	r3, [pc, #92]	; (8000318 <tube_cutting+0x18c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d112      	bne.n	80002e6 <tube_cutting+0x15a>
			stop();
 80002c0:	f7ff ff54 	bl	800016c <stop>
			HAL_Delay(10);
 80002c4:	200a      	movs	r0, #10
 80002c6:	f001 f9b3 	bl	8001630 <HAL_Delay>
			move_timer = HAL_GetTick();
 80002ca:	f001 f9a7 	bl	800161c <HAL_GetTick>
 80002ce:	4603      	mov	r3, r0
 80002d0:	4a15      	ldr	r2, [pc, #84]	; (8000328 <tube_cutting+0x19c>)
 80002d2:	6013      	str	r3, [r2, #0]
			TIM4->CCR1 = 9;
 80002d4:	4b17      	ldr	r3, [pc, #92]	; (8000334 <tube_cutting+0x1a8>)
 80002d6:	2209      	movs	r2, #9
 80002d8:	635a      	str	r2, [r3, #52]	; 0x34
			off_state++;
 80002da:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <tube_cutting+0x18c>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	3301      	adds	r3, #1
 80002e0:	4a0d      	ldr	r2, [pc, #52]	; (8000318 <tube_cutting+0x18c>)
 80002e2:	6013      	str	r3, [r2, #0]
}
 80002e4:	e016      	b.n	8000314 <tube_cutting+0x188>
		else if (off_state == 1)
 80002e6:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <tube_cutting+0x18c>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	2b01      	cmp	r3, #1
 80002ec:	d112      	bne.n	8000314 <tube_cutting+0x188>
			if (HAL_GetTick() - move_timer > 500)
 80002ee:	f001 f995 	bl	800161c <HAL_GetTick>
 80002f2:	4602      	mov	r2, r0
 80002f4:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <tube_cutting+0x19c>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	1ad3      	subs	r3, r2, r3
 80002fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80002fe:	d909      	bls.n	8000314 <tube_cutting+0x188>
				HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8000300:	2100      	movs	r1, #0
 8000302:	480b      	ldr	r0, [pc, #44]	; (8000330 <tube_cutting+0x1a4>)
 8000304:	f002 fb8e 	bl	8002a24 <HAL_TIM_PWM_Stop>
				off_state = 0;
 8000308:	4b03      	ldr	r3, [pc, #12]	; (8000318 <tube_cutting+0x18c>)
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
				motors_stop = 1;
 800030e:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <tube_cutting+0x1b4>)
 8000310:	2201      	movs	r2, #1
 8000312:	601a      	str	r2, [r3, #0]
}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}
 8000318:	20000164 	.word	0x20000164
 800031c:	20000154 	.word	0x20000154
 8000320:	40011000 	.word	0x40011000
 8000324:	20000160 	.word	0x20000160
 8000328:	2000015c 	.word	0x2000015c
 800032c:	20000000 	.word	0x20000000
 8000330:	200000fc 	.word	0x200000fc
 8000334:	40000800 	.word	0x40000800
 8000338:	20000004 	.word	0x20000004
 800033c:	20000158 	.word	0x20000158
 8000340:	20000168 	.word	0x20000168

08000344 <buttons_Init>:

void buttons_Init()
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
	stButtons[0].button_port = GPIOA;
 8000348:	4b04      	ldr	r3, [pc, #16]	; (800035c <buttons_Init+0x18>)
 800034a:	4a05      	ldr	r2, [pc, #20]	; (8000360 <buttons_Init+0x1c>)
 800034c:	601a      	str	r2, [r3, #0]
	stButtons[0].button_pin = GPIO_PIN_6;
 800034e:	4b03      	ldr	r3, [pc, #12]	; (800035c <buttons_Init+0x18>)
 8000350:	2240      	movs	r2, #64	; 0x40
 8000352:	809a      	strh	r2, [r3, #4]
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr
 800035c:	20000144 	.word	0x20000144
 8000360:	40010800 	.word	0x40010800

08000364 <getButton>:
uint8_t short_state = 0;
uint8_t long_state = 0;
uint32_t time_key1 = 0;

void getButton()
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
	for (int i=0; i<1; i++)
 800036a:	2300      	movs	r3, #0
 800036c:	60fb      	str	r3, [r7, #12]
 800036e:	e0fb      	b.n	8000568 <getButton+0x204>
	{
		uint32_t ms = HAL_GetTick();
 8000370:	f001 f954 	bl	800161c <HAL_GetTick>
 8000374:	60b8      	str	r0, [r7, #8]
		uint8_t key_state = HAL_GPIO_ReadPin(stButtons[i].button_port, stButtons[i].button_pin);
 8000376:	4981      	ldr	r1, [pc, #516]	; (800057c <getButton+0x218>)
 8000378:	68fa      	ldr	r2, [r7, #12]
 800037a:	4613      	mov	r3, r2
 800037c:	005b      	lsls	r3, r3, #1
 800037e:	4413      	add	r3, r2
 8000380:	009b      	lsls	r3, r3, #2
 8000382:	440b      	add	r3, r1
 8000384:	6818      	ldr	r0, [r3, #0]
 8000386:	497d      	ldr	r1, [pc, #500]	; (800057c <getButton+0x218>)
 8000388:	68fa      	ldr	r2, [r7, #12]
 800038a:	4613      	mov	r3, r2
 800038c:	005b      	lsls	r3, r3, #1
 800038e:	4413      	add	r3, r2
 8000390:	009b      	lsls	r3, r3, #2
 8000392:	440b      	add	r3, r1
 8000394:	3304      	adds	r3, #4
 8000396:	881b      	ldrh	r3, [r3, #0]
 8000398:	4619      	mov	r1, r3
 800039a:	f001 fbd5 	bl	8001b48 <HAL_GPIO_ReadPin>
 800039e:	4603      	mov	r3, r0
 80003a0:	71fb      	strb	r3, [r7, #7]
		if(key_state == 0 && !stButtons[i].short_state && (ms - stButtons[i].time_key) > 50)
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d136      	bne.n	8000416 <getButton+0xb2>
 80003a8:	4974      	ldr	r1, [pc, #464]	; (800057c <getButton+0x218>)
 80003aa:	68fa      	ldr	r2, [r7, #12]
 80003ac:	4613      	mov	r3, r2
 80003ae:	005b      	lsls	r3, r3, #1
 80003b0:	4413      	add	r3, r2
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	440b      	add	r3, r1
 80003b6:	3306      	adds	r3, #6
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d12b      	bne.n	8000416 <getButton+0xb2>
 80003be:	496f      	ldr	r1, [pc, #444]	; (800057c <getButton+0x218>)
 80003c0:	68fa      	ldr	r2, [r7, #12]
 80003c2:	4613      	mov	r3, r2
 80003c4:	005b      	lsls	r3, r3, #1
 80003c6:	4413      	add	r3, r2
 80003c8:	009b      	lsls	r3, r3, #2
 80003ca:	440b      	add	r3, r1
 80003cc:	3308      	adds	r3, #8
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	68ba      	ldr	r2, [r7, #8]
 80003d2:	1ad3      	subs	r3, r2, r3
 80003d4:	2b32      	cmp	r3, #50	; 0x32
 80003d6:	d91e      	bls.n	8000416 <getButton+0xb2>
		{
			stButtons[i].short_state = 1;
 80003d8:	4968      	ldr	r1, [pc, #416]	; (800057c <getButton+0x218>)
 80003da:	68fa      	ldr	r2, [r7, #12]
 80003dc:	4613      	mov	r3, r2
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	4413      	add	r3, r2
 80003e2:	009b      	lsls	r3, r3, #2
 80003e4:	440b      	add	r3, r1
 80003e6:	3306      	adds	r3, #6
 80003e8:	2201      	movs	r2, #1
 80003ea:	701a      	strb	r2, [r3, #0]
			stButtons[i].long_state = 0;
 80003ec:	4963      	ldr	r1, [pc, #396]	; (800057c <getButton+0x218>)
 80003ee:	68fa      	ldr	r2, [r7, #12]
 80003f0:	4613      	mov	r3, r2
 80003f2:	005b      	lsls	r3, r3, #1
 80003f4:	4413      	add	r3, r2
 80003f6:	009b      	lsls	r3, r3, #2
 80003f8:	440b      	add	r3, r1
 80003fa:	3307      	adds	r3, #7
 80003fc:	2200      	movs	r2, #0
 80003fe:	701a      	strb	r2, [r3, #0]
			stButtons[i].time_key = ms;
 8000400:	495e      	ldr	r1, [pc, #376]	; (800057c <getButton+0x218>)
 8000402:	68fa      	ldr	r2, [r7, #12]
 8000404:	4613      	mov	r3, r2
 8000406:	005b      	lsls	r3, r3, #1
 8000408:	4413      	add	r3, r2
 800040a:	009b      	lsls	r3, r3, #2
 800040c:	440b      	add	r3, r1
 800040e:	3308      	adds	r3, #8
 8000410:	68ba      	ldr	r2, [r7, #8]
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	e0a5      	b.n	8000562 <getButton+0x1fe>
		}
		else if(key_state == 0 && !stButtons[i].long_state && (ms - stButtons[i].time_key) > 1000)
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d132      	bne.n	8000482 <getButton+0x11e>
 800041c:	4957      	ldr	r1, [pc, #348]	; (800057c <getButton+0x218>)
 800041e:	68fa      	ldr	r2, [r7, #12]
 8000420:	4613      	mov	r3, r2
 8000422:	005b      	lsls	r3, r3, #1
 8000424:	4413      	add	r3, r2
 8000426:	009b      	lsls	r3, r3, #2
 8000428:	440b      	add	r3, r1
 800042a:	3307      	adds	r3, #7
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d127      	bne.n	8000482 <getButton+0x11e>
 8000432:	4952      	ldr	r1, [pc, #328]	; (800057c <getButton+0x218>)
 8000434:	68fa      	ldr	r2, [r7, #12]
 8000436:	4613      	mov	r3, r2
 8000438:	005b      	lsls	r3, r3, #1
 800043a:	4413      	add	r3, r2
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	440b      	add	r3, r1
 8000440:	3308      	adds	r3, #8
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	68ba      	ldr	r2, [r7, #8]
 8000446:	1ad3      	subs	r3, r2, r3
 8000448:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800044c:	d919      	bls.n	8000482 <getButton+0x11e>
		{
			stButtons[i].long_state = 1;
 800044e:	494b      	ldr	r1, [pc, #300]	; (800057c <getButton+0x218>)
 8000450:	68fa      	ldr	r2, [r7, #12]
 8000452:	4613      	mov	r3, r2
 8000454:	005b      	lsls	r3, r3, #1
 8000456:	4413      	add	r3, r2
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	440b      	add	r3, r1
 800045c:	3307      	adds	r3, #7
 800045e:	2201      	movs	r2, #1
 8000460:	701a      	strb	r2, [r3, #0]
			//long press
			if (i==0)
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d17b      	bne.n	8000560 <getButton+0x1fc>
			{
				curr_menu++;
 8000468:	4b45      	ldr	r3, [pc, #276]	; (8000580 <getButton+0x21c>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	3301      	adds	r3, #1
 800046e:	4a44      	ldr	r2, [pc, #272]	; (8000580 <getButton+0x21c>)
 8000470:	6013      	str	r3, [r2, #0]
				if (curr_menu>=MENU_MAX)
 8000472:	4b43      	ldr	r3, [pc, #268]	; (8000580 <getButton+0x21c>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	2b02      	cmp	r3, #2
 8000478:	dd72      	ble.n	8000560 <getButton+0x1fc>
				{
					curr_menu = 0;
 800047a:	4b41      	ldr	r3, [pc, #260]	; (8000580 <getButton+0x21c>)
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
			if (i==0)
 8000480:	e06e      	b.n	8000560 <getButton+0x1fc>
				}
			}
		}
		else if(key_state == 1 && stButtons[i].short_state && (ms - stButtons[i].time_key) > 50)
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	2b01      	cmp	r3, #1
 8000486:	d16c      	bne.n	8000562 <getButton+0x1fe>
 8000488:	493c      	ldr	r1, [pc, #240]	; (800057c <getButton+0x218>)
 800048a:	68fa      	ldr	r2, [r7, #12]
 800048c:	4613      	mov	r3, r2
 800048e:	005b      	lsls	r3, r3, #1
 8000490:	4413      	add	r3, r2
 8000492:	009b      	lsls	r3, r3, #2
 8000494:	440b      	add	r3, r1
 8000496:	3306      	adds	r3, #6
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d061      	beq.n	8000562 <getButton+0x1fe>
 800049e:	4937      	ldr	r1, [pc, #220]	; (800057c <getButton+0x218>)
 80004a0:	68fa      	ldr	r2, [r7, #12]
 80004a2:	4613      	mov	r3, r2
 80004a4:	005b      	lsls	r3, r3, #1
 80004a6:	4413      	add	r3, r2
 80004a8:	009b      	lsls	r3, r3, #2
 80004aa:	440b      	add	r3, r1
 80004ac:	3308      	adds	r3, #8
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	68ba      	ldr	r2, [r7, #8]
 80004b2:	1ad3      	subs	r3, r2, r3
 80004b4:	2b32      	cmp	r3, #50	; 0x32
 80004b6:	d954      	bls.n	8000562 <getButton+0x1fe>
		{
			stButtons[i].short_state = 0;
 80004b8:	4930      	ldr	r1, [pc, #192]	; (800057c <getButton+0x218>)
 80004ba:	68fa      	ldr	r2, [r7, #12]
 80004bc:	4613      	mov	r3, r2
 80004be:	005b      	lsls	r3, r3, #1
 80004c0:	4413      	add	r3, r2
 80004c2:	009b      	lsls	r3, r3, #2
 80004c4:	440b      	add	r3, r1
 80004c6:	3306      	adds	r3, #6
 80004c8:	2200      	movs	r2, #0
 80004ca:	701a      	strb	r2, [r3, #0]
			stButtons[i].time_key = ms;
 80004cc:	492b      	ldr	r1, [pc, #172]	; (800057c <getButton+0x218>)
 80004ce:	68fa      	ldr	r2, [r7, #12]
 80004d0:	4613      	mov	r3, r2
 80004d2:	005b      	lsls	r3, r3, #1
 80004d4:	4413      	add	r3, r2
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	440b      	add	r3, r1
 80004da:	3308      	adds	r3, #8
 80004dc:	68ba      	ldr	r2, [r7, #8]
 80004de:	601a      	str	r2, [r3, #0]

		  if(!stButtons[i].long_state)
 80004e0:	4926      	ldr	r1, [pc, #152]	; (800057c <getButton+0x218>)
 80004e2:	68fa      	ldr	r2, [r7, #12]
 80004e4:	4613      	mov	r3, r2
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	4413      	add	r3, r2
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	440b      	add	r3, r1
 80004ee:	3307      	adds	r3, #7
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d135      	bne.n	8000562 <getButton+0x1fe>
		  {
			//short press
			  if (curr_menu == MENU_START)
 80004f6:	4b22      	ldr	r3, [pc, #136]	; (8000580 <getButton+0x21c>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d10a      	bne.n	8000514 <getButton+0x1b0>
			  {
				  prog_start = !prog_start;
 80004fe:	4b21      	ldr	r3, [pc, #132]	; (8000584 <getButton+0x220>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2b00      	cmp	r3, #0
 8000504:	bf0c      	ite	eq
 8000506:	2301      	moveq	r3, #1
 8000508:	2300      	movne	r3, #0
 800050a:	b2db      	uxtb	r3, r3
 800050c:	461a      	mov	r2, r3
 800050e:	4b1d      	ldr	r3, [pc, #116]	; (8000584 <getButton+0x220>)
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	e026      	b.n	8000562 <getButton+0x1fe>
			  }
			  else if (curr_menu == MENU_LENGTH)
 8000514:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <getButton+0x21c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d10c      	bne.n	8000536 <getButton+0x1d2>
			  {
				  tube_length++;
 800051c:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <getButton+0x224>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	3301      	adds	r3, #1
 8000522:	4a19      	ldr	r2, [pc, #100]	; (8000588 <getButton+0x224>)
 8000524:	6013      	str	r3, [r2, #0]
				  if (tube_length > 20) tube_length = 5;
 8000526:	4b18      	ldr	r3, [pc, #96]	; (8000588 <getButton+0x224>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2b14      	cmp	r3, #20
 800052c:	dd19      	ble.n	8000562 <getButton+0x1fe>
 800052e:	4b16      	ldr	r3, [pc, #88]	; (8000588 <getButton+0x224>)
 8000530:	2205      	movs	r2, #5
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	e015      	b.n	8000562 <getButton+0x1fe>
			  }
			  else if (curr_menu == MENU_QUANT)
 8000536:	4b12      	ldr	r3, [pc, #72]	; (8000580 <getButton+0x21c>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2b02      	cmp	r3, #2
 800053c:	d111      	bne.n	8000562 <getButton+0x1fe>
			  {
				  tube_quant+=5;
 800053e:	4b13      	ldr	r3, [pc, #76]	; (800058c <getButton+0x228>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	3305      	adds	r3, #5
 8000544:	4a11      	ldr	r2, [pc, #68]	; (800058c <getButton+0x228>)
 8000546:	6013      	str	r3, [r2, #0]
				  if (tube_quant > 50) tube_quant = 5;
 8000548:	4b10      	ldr	r3, [pc, #64]	; (800058c <getButton+0x228>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b32      	cmp	r3, #50	; 0x32
 800054e:	dd02      	ble.n	8000556 <getButton+0x1f2>
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <getButton+0x228>)
 8000552:	2205      	movs	r2, #5
 8000554:	601a      	str	r2, [r3, #0]
				  tube_prev_quant = tube_quant;
 8000556:	4b0d      	ldr	r3, [pc, #52]	; (800058c <getButton+0x228>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a0d      	ldr	r2, [pc, #52]	; (8000590 <getButton+0x22c>)
 800055c:	6013      	str	r3, [r2, #0]
 800055e:	e000      	b.n	8000562 <getButton+0x1fe>
			if (i==0)
 8000560:	bf00      	nop
	for (int i=0; i<1; i++)
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	3301      	adds	r3, #1
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	2b00      	cmp	r3, #0
 800056c:	f77f af00 	ble.w	8000370 <getButton+0xc>
			  }
		  }
		}
	}
}
 8000570:	bf00      	nop
 8000572:	bf00      	nop
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000144 	.word	0x20000144
 8000580:	20000150 	.word	0x20000150
 8000584:	20000154 	.word	0x20000154
 8000588:	20000000 	.word	0x20000000
 800058c:	20000004 	.word	0x20000004
 8000590:	20000158 	.word	0x20000158

08000594 <menu_update>:

void menu_update()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af02      	add	r7, sp, #8
	SSD1306_COLOR color1 = White;
 800059a:	2301      	movs	r3, #1
 800059c:	73fb      	strb	r3, [r7, #15]
	SSD1306_COLOR color2 = White;
 800059e:	2301      	movs	r3, #1
 80005a0:	73bb      	strb	r3, [r7, #14]
	SSD1306_COLOR color3 = White;
 80005a2:	2301      	movs	r3, #1
 80005a4:	737b      	strb	r3, [r7, #13]
	if (curr_menu == MENU_START)
 80005a6:	4b74      	ldr	r3, [pc, #464]	; (8000778 <menu_update+0x1e4>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d126      	bne.n	80005fc <menu_update+0x68>
	{
		//char str [12];
		//if (!prog_start) snprintf(str, sizeof str, "%s", "pause");
		//else snprintf(str, sizeof str, "%s", "run");
		ssd1306_Fill(Black);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 fc9c 	bl	8000eec <ssd1306_Fill>
		color1 = Black;
 80005b4:	2300      	movs	r3, #0
 80005b6:	73fb      	strb	r3, [r7, #15]
		//ssd1306_SetCursor(3, 20);
		//ssd1306_WriteString(str, Font_7x10, White);
		for (int i=0; i<tube_quant; i++)
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	e018      	b.n	80005f0 <menu_update+0x5c>
		{
			ssd1306_FillRectangle(4+i*3, 42, 5+i*3, 56, White);;
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	461a      	mov	r2, r3
 80005c4:	0052      	lsls	r2, r2, #1
 80005c6:	4413      	add	r3, r2
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	3304      	adds	r3, #4
 80005cc:	b2d8      	uxtb	r0, r3
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	461a      	mov	r2, r3
 80005d4:	0052      	lsls	r2, r2, #1
 80005d6:	4413      	add	r3, r2
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	3305      	adds	r3, #5
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	2301      	movs	r3, #1
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2338      	movs	r3, #56	; 0x38
 80005e4:	212a      	movs	r1, #42	; 0x2a
 80005e6:	f000 ff1c 	bl	8001422 <ssd1306_FillRectangle>
		for (int i=0; i<tube_quant; i++)
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	3301      	adds	r3, #1
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	4b62      	ldr	r3, [pc, #392]	; (800077c <menu_update+0x1e8>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	68ba      	ldr	r2, [r7, #8]
 80005f6:	429a      	cmp	r2, r3
 80005f8:	dbe1      	blt.n	80005be <menu_update+0x2a>
 80005fa:	e034      	b.n	8000666 <menu_update+0xd2>
		}
	}
	else if (curr_menu == MENU_LENGTH) {
 80005fc:	4b5e      	ldr	r3, [pc, #376]	; (8000778 <menu_update+0x1e4>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d111      	bne.n	8000628 <menu_update+0x94>
		ssd1306_Fill(Black);
 8000604:	2000      	movs	r0, #0
 8000606:	f000 fc71 	bl	8000eec <ssd1306_Fill>
		color2 = Black;
 800060a:	2300      	movs	r3, #0
 800060c:	73bb      	strb	r3, [r7, #14]
		//char str [12];
		//snprintf(str, sizeof str, "%d", tube_length);
		//ssd1306_SetCursor(57, 16);
		//ssd1306_WriteString(str, Font_11x18, White);
		ssd1306_FillRectangle(5, 42, tube_length*4, 56, White);
 800060e:	4b5c      	ldr	r3, [pc, #368]	; (8000780 <menu_update+0x1ec>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	b2da      	uxtb	r2, r3
 8000618:	2301      	movs	r3, #1
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	2338      	movs	r3, #56	; 0x38
 800061e:	212a      	movs	r1, #42	; 0x2a
 8000620:	2005      	movs	r0, #5
 8000622:	f000 fefe 	bl	8001422 <ssd1306_FillRectangle>
 8000626:	e01e      	b.n	8000666 <menu_update+0xd2>
	}
	else if (curr_menu == MENU_QUANT)
 8000628:	4b53      	ldr	r3, [pc, #332]	; (8000778 <menu_update+0x1e4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b02      	cmp	r3, #2
 800062e:	d11a      	bne.n	8000666 <menu_update+0xd2>
	{
		ssd1306_Fill(Black);
 8000630:	2000      	movs	r0, #0
 8000632:	f000 fc5b 	bl	8000eec <ssd1306_Fill>
		color3 = Black;
 8000636:	2300      	movs	r3, #0
 8000638:	737b      	strb	r3, [r7, #13]
		//char str [12];
		//snprintf(str, sizeof str, "%d", tube_quant);
		//ssd1306_SetCursor(98, 16);
		//ssd1306_WriteString(str, Font_11x18, White);
		//ssd1306_DrawCircle(5+tube_quant*2, 49, 9, White);
		for (int i=0; i<tube_quant; i++)
 800063a:	2300      	movs	r3, #0
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	e00d      	b.n	800065c <menu_update+0xc8>
		{
			ssd1306_DrawCircle(15+i*2, 49, 5, White);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	b2db      	uxtb	r3, r3
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	b2db      	uxtb	r3, r3
 8000648:	330f      	adds	r3, #15
 800064a:	b2d8      	uxtb	r0, r3
 800064c:	2301      	movs	r3, #1
 800064e:	2205      	movs	r2, #5
 8000650:	2131      	movs	r1, #49	; 0x31
 8000652:	f000 fe29 	bl	80012a8 <ssd1306_DrawCircle>
		for (int i=0; i<tube_quant; i++)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	3301      	adds	r3, #1
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b47      	ldr	r3, [pc, #284]	; (800077c <menu_update+0x1e8>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	429a      	cmp	r2, r3
 8000664:	dbec      	blt.n	8000640 <menu_update+0xac>
		}
	}
	ssd1306_SetCursor(4, 2);
 8000666:	2102      	movs	r1, #2
 8000668:	2004      	movs	r0, #4
 800066a:	f000 fd99 	bl	80011a0 <ssd1306_SetCursor>
	ssd1306_WriteString("Status", Font_7x10, color1);
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	4a44      	ldr	r2, [pc, #272]	; (8000784 <menu_update+0x1f0>)
 8000672:	ca06      	ldmia	r2, {r1, r2}
 8000674:	4844      	ldr	r0, [pc, #272]	; (8000788 <menu_update+0x1f4>)
 8000676:	f000 fd6d 	bl	8001154 <ssd1306_WriteString>
	ssd1306_SetCursor(47, 2);
 800067a:	2102      	movs	r1, #2
 800067c:	202f      	movs	r0, #47	; 0x2f
 800067e:	f000 fd8f 	bl	80011a0 <ssd1306_SetCursor>
	ssd1306_WriteString("Length", Font_7x10, color2);
 8000682:	7bbb      	ldrb	r3, [r7, #14]
 8000684:	4a3f      	ldr	r2, [pc, #252]	; (8000784 <menu_update+0x1f0>)
 8000686:	ca06      	ldmia	r2, {r1, r2}
 8000688:	4840      	ldr	r0, [pc, #256]	; (800078c <menu_update+0x1f8>)
 800068a:	f000 fd63 	bl	8001154 <ssd1306_WriteString>
	ssd1306_SetCursor(92, 2);
 800068e:	2102      	movs	r1, #2
 8000690:	205c      	movs	r0, #92	; 0x5c
 8000692:	f000 fd85 	bl	80011a0 <ssd1306_SetCursor>
	ssd1306_WriteString("Quant", Font_7x10, color3);
 8000696:	7b7b      	ldrb	r3, [r7, #13]
 8000698:	4a3a      	ldr	r2, [pc, #232]	; (8000784 <menu_update+0x1f0>)
 800069a:	ca06      	ldmia	r2, {r1, r2}
 800069c:	483c      	ldr	r0, [pc, #240]	; (8000790 <menu_update+0x1fc>)
 800069e:	f000 fd59 	bl	8001154 <ssd1306_WriteString>
	ssd1306_DrawRectangle(2, 0, 128, 63, White);
 80006a2:	2301      	movs	r3, #1
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	233f      	movs	r3, #63	; 0x3f
 80006a8:	2280      	movs	r2, #128	; 0x80
 80006aa:	2100      	movs	r1, #0
 80006ac:	2002      	movs	r0, #2
 80006ae:	f000 fe81 	bl	80013b4 <ssd1306_DrawRectangle>
	ssd1306_Line(2, 13, 128, 13, White);
 80006b2:	2301      	movs	r3, #1
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	230d      	movs	r3, #13
 80006b8:	2280      	movs	r2, #128	; 0x80
 80006ba:	210d      	movs	r1, #13
 80006bc:	2002      	movs	r0, #2
 80006be:	f000 fd87 	bl	80011d0 <ssd1306_Line>
	ssd1306_Line(2, 35, 128, 35, White);
 80006c2:	2301      	movs	r3, #1
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	2323      	movs	r3, #35	; 0x23
 80006c8:	2280      	movs	r2, #128	; 0x80
 80006ca:	2123      	movs	r1, #35	; 0x23
 80006cc:	2002      	movs	r0, #2
 80006ce:	f000 fd7f 	bl	80011d0 <ssd1306_Line>
	ssd1306_Line(45, 1, 45, 35, White);
 80006d2:	2301      	movs	r3, #1
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	2323      	movs	r3, #35	; 0x23
 80006d8:	222d      	movs	r2, #45	; 0x2d
 80006da:	2101      	movs	r1, #1
 80006dc:	202d      	movs	r0, #45	; 0x2d
 80006de:	f000 fd77 	bl	80011d0 <ssd1306_Line>
	ssd1306_Line(90, 1, 90, 35, White);
 80006e2:	2301      	movs	r3, #1
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	2323      	movs	r3, #35	; 0x23
 80006e8:	225a      	movs	r2, #90	; 0x5a
 80006ea:	2101      	movs	r1, #1
 80006ec:	205a      	movs	r0, #90	; 0x5a
 80006ee:	f000 fd6f 	bl	80011d0 <ssd1306_Line>
	static char strq [12];

	if (!prog_start) snprintf(strq, sizeof strq, "%s", "pause");
 80006f2:	4b28      	ldr	r3, [pc, #160]	; (8000794 <menu_update+0x200>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d106      	bne.n	8000708 <menu_update+0x174>
 80006fa:	4b27      	ldr	r3, [pc, #156]	; (8000798 <menu_update+0x204>)
 80006fc:	4a27      	ldr	r2, [pc, #156]	; (800079c <menu_update+0x208>)
 80006fe:	210c      	movs	r1, #12
 8000700:	4827      	ldr	r0, [pc, #156]	; (80007a0 <menu_update+0x20c>)
 8000702:	f002 fd7b 	bl	80031fc <sniprintf>
 8000706:	e005      	b.n	8000714 <menu_update+0x180>
	else snprintf(strq, sizeof strq, "%s", "run");
 8000708:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <menu_update+0x210>)
 800070a:	4a24      	ldr	r2, [pc, #144]	; (800079c <menu_update+0x208>)
 800070c:	210c      	movs	r1, #12
 800070e:	4824      	ldr	r0, [pc, #144]	; (80007a0 <menu_update+0x20c>)
 8000710:	f002 fd74 	bl	80031fc <sniprintf>
	ssd1306_SetCursor(5, 20);
 8000714:	2114      	movs	r1, #20
 8000716:	2005      	movs	r0, #5
 8000718:	f000 fd42 	bl	80011a0 <ssd1306_SetCursor>
	ssd1306_WriteString(strq, Font_7x10, White);
 800071c:	4a19      	ldr	r2, [pc, #100]	; (8000784 <menu_update+0x1f0>)
 800071e:	2301      	movs	r3, #1
 8000720:	ca06      	ldmia	r2, {r1, r2}
 8000722:	481f      	ldr	r0, [pc, #124]	; (80007a0 <menu_update+0x20c>)
 8000724:	f000 fd16 	bl	8001154 <ssd1306_WriteString>

	snprintf(strq, sizeof strq, "%d", tube_length);
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <menu_update+0x1ec>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a1e      	ldr	r2, [pc, #120]	; (80007a8 <menu_update+0x214>)
 800072e:	210c      	movs	r1, #12
 8000730:	481b      	ldr	r0, [pc, #108]	; (80007a0 <menu_update+0x20c>)
 8000732:	f002 fd63 	bl	80031fc <sniprintf>
	ssd1306_SetCursor(57, 16);
 8000736:	2110      	movs	r1, #16
 8000738:	2039      	movs	r0, #57	; 0x39
 800073a:	f000 fd31 	bl	80011a0 <ssd1306_SetCursor>
	ssd1306_WriteString(strq, Font_11x18, White);
 800073e:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <menu_update+0x218>)
 8000740:	2301      	movs	r3, #1
 8000742:	ca06      	ldmia	r2, {r1, r2}
 8000744:	4816      	ldr	r0, [pc, #88]	; (80007a0 <menu_update+0x20c>)
 8000746:	f000 fd05 	bl	8001154 <ssd1306_WriteString>
	snprintf(strq, sizeof strq, "%d", tube_quant);
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <menu_update+0x1e8>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a16      	ldr	r2, [pc, #88]	; (80007a8 <menu_update+0x214>)
 8000750:	210c      	movs	r1, #12
 8000752:	4813      	ldr	r0, [pc, #76]	; (80007a0 <menu_update+0x20c>)
 8000754:	f002 fd52 	bl	80031fc <sniprintf>
	ssd1306_SetCursor(98, 16);
 8000758:	2110      	movs	r1, #16
 800075a:	2062      	movs	r0, #98	; 0x62
 800075c:	f000 fd20 	bl	80011a0 <ssd1306_SetCursor>
	ssd1306_WriteString(strq, Font_11x18, White);
 8000760:	4a12      	ldr	r2, [pc, #72]	; (80007ac <menu_update+0x218>)
 8000762:	2301      	movs	r3, #1
 8000764:	ca06      	ldmia	r2, {r1, r2}
 8000766:	480e      	ldr	r0, [pc, #56]	; (80007a0 <menu_update+0x20c>)
 8000768:	f000 fcf4 	bl	8001154 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 800076c:	f000 fbe0 	bl	8000f30 <ssd1306_UpdateScreen>
}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000150 	.word	0x20000150
 800077c:	20000004 	.word	0x20000004
 8000780:	20000000 	.word	0x20000000
 8000784:	2000000c 	.word	0x2000000c
 8000788:	08003ae0 	.word	0x08003ae0
 800078c:	08003ae8 	.word	0x08003ae8
 8000790:	08003af0 	.word	0x08003af0
 8000794:	20000154 	.word	0x20000154
 8000798:	08003af8 	.word	0x08003af8
 800079c:	08003b00 	.word	0x08003b00
 80007a0:	2000016c 	.word	0x2000016c
 80007a4:	08003b04 	.word	0x08003b04
 80007a8:	08003b08 	.word	0x08003b08
 80007ac:	20000014 	.word	0x20000014

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b4:	f000 feda 	bl	800156c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b8:	f000 f826 	bl	8000808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007bc:	f000 f8fc 	bl	80009b8 <MX_GPIO_Init>
  MX_TIM4_Init();
 80007c0:	f000 f8a0 	bl	8000904 <MX_TIM4_Init>
  MX_SPI1_Init();
 80007c4:	f000 f866 	bl	8000894 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80007c8:	f000 fb26 	bl	8000e18 <ssd1306_Init>
  buttons_Init();
 80007cc:	f7ff fdba 	bl	8000344 <buttons_Init>
  tube_prev_quant = tube_quant;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <main+0x4c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a0a      	ldr	r2, [pc, #40]	; (8000800 <main+0x50>)
 80007d6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  getButton();
 80007d8:	f7ff fdc4 	bl	8000364 <getButton>
	  if(curr_menu == MENU_START)
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <main+0x54>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d002      	beq.n	80007ea <main+0x3a>
	  {
		  //getEncoder();
	  }
	  else if (curr_menu == MENU_LENGTH)
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <main+0x54>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b01      	cmp	r3, #1
	  }
	  else if (curr_menu == MENU_QUANT)
	  {
	  	  //Moving();
	  }
	  menu_update();
 80007ea:	f7ff fed3 	bl	8000594 <menu_update>
	  tube_cutting();
 80007ee:	f7ff fccd 	bl	800018c <tube_cutting>
	  HAL_Delay(1);
 80007f2:	2001      	movs	r0, #1
 80007f4:	f000 ff1c 	bl	8001630 <HAL_Delay>
	  getButton();
 80007f8:	e7ee      	b.n	80007d8 <main+0x28>
 80007fa:	bf00      	nop
 80007fc:	20000004 	.word	0x20000004
 8000800:	20000158 	.word	0x20000158
 8000804:	20000150 	.word	0x20000150

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b090      	sub	sp, #64	; 0x40
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 0318 	add.w	r3, r7, #24
 8000812:	2228      	movs	r2, #40	; 0x28
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f002 fce8 	bl	80031ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800082a:	2301      	movs	r3, #1
 800082c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800082e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000832:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000838:	2301      	movs	r3, #1
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083c:	2302      	movs	r3, #2
 800083e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000840:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000844:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000846:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800084a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084c:	f107 0318 	add.w	r3, r7, #24
 8000850:	4618      	mov	r0, r3
 8000852:	f001 f9a9 	bl	8001ba8 <HAL_RCC_OscConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800085c:	f000 f948 	bl	8000af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000860:	230f      	movs	r3, #15
 8000862:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000864:	2302      	movs	r3, #2
 8000866:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800086c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000870:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2102      	movs	r1, #2
 800087a:	4618      	mov	r0, r3
 800087c:	f001 fc16 	bl	80020ac <HAL_RCC_ClockConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000886:	f000 f933 	bl	8000af0 <Error_Handler>
  }
}
 800088a:	bf00      	nop
 800088c:	3740      	adds	r7, #64	; 0x40
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <MX_SPI1_Init+0x68>)
 800089a:	4a19      	ldr	r2, [pc, #100]	; (8000900 <MX_SPI1_Init+0x6c>)
 800089c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_SPI1_Init+0x68>)
 80008a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_SPI1_Init+0x68>)
 80008a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008ac:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008ae:	4b13      	ldr	r3, [pc, #76]	; (80008fc <MX_SPI1_Init+0x68>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_SPI1_Init+0x68>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_SPI1_Init+0x68>)
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008c0:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_SPI1_Init+0x68>)
 80008c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_SPI1_Init+0x68>)
 80008ca:	2230      	movs	r2, #48	; 0x30
 80008cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MX_SPI1_Init+0x68>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_SPI1_Init+0x68>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <MX_SPI1_Init+0x68>)
 80008dc:	2200      	movs	r2, #0
 80008de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_SPI1_Init+0x68>)
 80008e2:	220a      	movs	r2, #10
 80008e4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_SPI1_Init+0x68>)
 80008e8:	f001 fd3c 	bl	8002364 <HAL_SPI_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80008f2:	f000 f8fd 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200000a4 	.word	0x200000a4
 8000900:	40013000 	.word	0x40013000

08000904 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	; 0x28
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090a:	f107 0320 	add.w	r3, r7, #32
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]
 8000922:	615a      	str	r2, [r3, #20]
 8000924:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000926:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <MX_TIM4_Init+0xac>)
 8000928:	4a22      	ldr	r2, [pc, #136]	; (80009b4 <MX_TIM4_Init+0xb0>)
 800092a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5624;
 800092c:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <MX_TIM4_Init+0xac>)
 800092e:	f241 52f8 	movw	r2, #5624	; 0x15f8
 8000932:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000934:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <MX_TIM4_Init+0xac>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 800093a:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <MX_TIM4_Init+0xac>)
 800093c:	22ff      	movs	r2, #255	; 0xff
 800093e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000940:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <MX_TIM4_Init+0xac>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000946:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <MX_TIM4_Init+0xac>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800094c:	4818      	ldr	r0, [pc, #96]	; (80009b0 <MX_TIM4_Init+0xac>)
 800094e:	f001 ff77 	bl	8002840 <HAL_TIM_PWM_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000958:	f000 f8ca 	bl	8000af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000964:	f107 0320 	add.w	r3, r7, #32
 8000968:	4619      	mov	r1, r3
 800096a:	4811      	ldr	r0, [pc, #68]	; (80009b0 <MX_TIM4_Init+0xac>)
 800096c:	f002 fb8e 	bl	800308c <HAL_TIMEx_MasterConfigSynchronization>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000976:	f000 f8bb 	bl	8000af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800097a:	2360      	movs	r3, #96	; 0x60
 800097c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2200      	movs	r2, #0
 800098e:	4619      	mov	r1, r3
 8000990:	4807      	ldr	r0, [pc, #28]	; (80009b0 <MX_TIM4_Init+0xac>)
 8000992:	f002 f8ab 	bl	8002aec <HAL_TIM_PWM_ConfigChannel>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800099c:	f000 f8a8 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80009a0:	4803      	ldr	r0, [pc, #12]	; (80009b0 <MX_TIM4_Init+0xac>)
 80009a2:	f000 f939 	bl	8000c18 <HAL_TIM_MspPostInit>

}
 80009a6:	bf00      	nop
 80009a8:	3728      	adds	r7, #40	; 0x28
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	200000fc 	.word	0x200000fc
 80009b4:	40000800 	.word	0x40000800

080009b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	f107 0310 	add.w	r3, r7, #16
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009cc:	4b44      	ldr	r3, [pc, #272]	; (8000ae0 <MX_GPIO_Init+0x128>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a43      	ldr	r2, [pc, #268]	; (8000ae0 <MX_GPIO_Init+0x128>)
 80009d2:	f043 0310 	orr.w	r3, r3, #16
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b41      	ldr	r3, [pc, #260]	; (8000ae0 <MX_GPIO_Init+0x128>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f003 0310 	and.w	r3, r3, #16
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e4:	4b3e      	ldr	r3, [pc, #248]	; (8000ae0 <MX_GPIO_Init+0x128>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a3d      	ldr	r2, [pc, #244]	; (8000ae0 <MX_GPIO_Init+0x128>)
 80009ea:	f043 0320 	orr.w	r3, r3, #32
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b3b      	ldr	r3, [pc, #236]	; (8000ae0 <MX_GPIO_Init+0x128>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0320 	and.w	r3, r3, #32
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fc:	4b38      	ldr	r3, [pc, #224]	; (8000ae0 <MX_GPIO_Init+0x128>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a37      	ldr	r2, [pc, #220]	; (8000ae0 <MX_GPIO_Init+0x128>)
 8000a02:	f043 0304 	orr.w	r3, r3, #4
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b35      	ldr	r3, [pc, #212]	; (8000ae0 <MX_GPIO_Init+0x128>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0304 	and.w	r3, r3, #4
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a14:	4b32      	ldr	r3, [pc, #200]	; (8000ae0 <MX_GPIO_Init+0x128>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	4a31      	ldr	r2, [pc, #196]	; (8000ae0 <MX_GPIO_Init+0x128>)
 8000a1a:	f043 0308 	orr.w	r3, r3, #8
 8000a1e:	6193      	str	r3, [r2, #24]
 8000a20:	4b2f      	ldr	r3, [pc, #188]	; (8000ae0 <MX_GPIO_Init+0x128>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f003 0308 	and.w	r3, r3, #8
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a32:	482c      	ldr	r0, [pc, #176]	; (8000ae4 <MX_GPIO_Init+0x12c>)
 8000a34:	f001 f89f 	bl	8001b76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_DC_Pin|OLED_Res_Pin, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2118      	movs	r1, #24
 8000a3c:	482a      	ldr	r0, [pc, #168]	; (8000ae8 <MX_GPIO_Init+0x130>)
 8000a3e:	f001 f89a 	bl	8001b76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|OLED_CS_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2107      	movs	r1, #7
 8000a46:	4829      	ldr	r0, [pc, #164]	; (8000aec <MX_GPIO_Init+0x134>)
 8000a48:	f001 f895 	bl	8001b76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5e:	f107 0310 	add.w	r3, r7, #16
 8000a62:	4619      	mov	r1, r3
 8000a64:	481f      	ldr	r0, [pc, #124]	; (8000ae4 <MX_GPIO_Init+0x12c>)
 8000a66:	f000 feeb 	bl	8001840 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_DC_Pin OLED_Res_Pin */
  GPIO_InitStruct.Pin = OLED_DC_Pin|OLED_Res_Pin;
 8000a6a:	2318      	movs	r3, #24
 8000a6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2302      	movs	r3, #2
 8000a78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 0310 	add.w	r3, r7, #16
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4819      	ldr	r0, [pc, #100]	; (8000ae8 <MX_GPIO_Init+0x130>)
 8000a82:	f000 fedd 	bl	8001840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a86:	2340      	movs	r3, #64	; 0x40
 8000a88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a92:	f107 0310 	add.w	r3, r7, #16
 8000a96:	4619      	mov	r1, r3
 8000a98:	4813      	ldr	r0, [pc, #76]	; (8000ae8 <MX_GPIO_Init+0x130>)
 8000a9a:	f000 fed1 	bl	8001840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aae:	f107 0310 	add.w	r3, r7, #16
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	480d      	ldr	r0, [pc, #52]	; (8000aec <MX_GPIO_Init+0x134>)
 8000ab6:	f000 fec3 	bl	8001840 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8000aba:	2304      	movs	r3, #4
 8000abc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 0310 	add.w	r3, r7, #16
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4806      	ldr	r0, [pc, #24]	; (8000aec <MX_GPIO_Init+0x134>)
 8000ad2:	f000 feb5 	bl	8001840 <HAL_GPIO_Init>

}
 8000ad6:	bf00      	nop
 8000ad8:	3720      	adds	r7, #32
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	40011000 	.word	0x40011000
 8000ae8:	40010800 	.word	0x40010800
 8000aec:	40010c00 	.word	0x40010c00

08000af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af4:	b672      	cpsid	i
}
 8000af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <Error_Handler+0x8>
	...

08000afc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <HAL_MspInit+0x5c>)
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	4a14      	ldr	r2, [pc, #80]	; (8000b58 <HAL_MspInit+0x5c>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6193      	str	r3, [r2, #24]
 8000b0e:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <HAL_MspInit+0x5c>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <HAL_MspInit+0x5c>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	4a0e      	ldr	r2, [pc, #56]	; (8000b58 <HAL_MspInit+0x5c>)
 8000b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b24:	61d3      	str	r3, [r2, #28]
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <HAL_MspInit+0x5c>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_MspInit+0x60>)
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <HAL_MspInit+0x60>)
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	40010000 	.word	0x40010000

08000b60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0310 	add.w	r3, r7, #16
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a15      	ldr	r2, [pc, #84]	; (8000bd0 <HAL_SPI_MspInit+0x70>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d123      	bne.n	8000bc8 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <HAL_SPI_MspInit+0x74>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	4a13      	ldr	r2, [pc, #76]	; (8000bd4 <HAL_SPI_MspInit+0x74>)
 8000b86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b8a:	6193      	str	r3, [r2, #24]
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <HAL_SPI_MspInit+0x74>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b98:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <HAL_SPI_MspInit+0x74>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a0d      	ldr	r2, [pc, #52]	; (8000bd4 <HAL_SPI_MspInit+0x74>)
 8000b9e:	f043 0304 	orr.w	r3, r3, #4
 8000ba2:	6193      	str	r3, [r2, #24]
 8000ba4:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <HAL_SPI_MspInit+0x74>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	f003 0304 	and.w	r3, r3, #4
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000bb0:	23a0      	movs	r3, #160	; 0xa0
 8000bb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbc:	f107 0310 	add.w	r3, r7, #16
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <HAL_SPI_MspInit+0x78>)
 8000bc4:	f000 fe3c 	bl	8001840 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bc8:	bf00      	nop
 8000bca:	3720      	adds	r7, #32
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40013000 	.word	0x40013000
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	40010800 	.word	0x40010800

08000bdc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a09      	ldr	r2, [pc, #36]	; (8000c10 <HAL_TIM_PWM_MspInit+0x34>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d10b      	bne.n	8000c06 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <HAL_TIM_PWM_MspInit+0x38>)
 8000bf0:	69db      	ldr	r3, [r3, #28]
 8000bf2:	4a08      	ldr	r2, [pc, #32]	; (8000c14 <HAL_TIM_PWM_MspInit+0x38>)
 8000bf4:	f043 0304 	orr.w	r3, r3, #4
 8000bf8:	61d3      	str	r3, [r2, #28]
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_TIM_PWM_MspInit+0x38>)
 8000bfc:	69db      	ldr	r3, [r3, #28]
 8000bfe:	f003 0304 	and.w	r3, r3, #4
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c06:	bf00      	nop
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	40000800 	.word	0x40000800
 8000c14:	40021000 	.word	0x40021000

08000c18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0310 	add.w	r3, r7, #16
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a0f      	ldr	r2, [pc, #60]	; (8000c70 <HAL_TIM_MspPostInit+0x58>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d117      	bne.n	8000c68 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c38:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_TIM_MspPostInit+0x5c>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	; (8000c74 <HAL_TIM_MspPostInit+0x5c>)
 8000c3e:	f043 0308 	orr.w	r3, r3, #8
 8000c42:	6193      	str	r3, [r2, #24]
 8000c44:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <HAL_TIM_MspPostInit+0x5c>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	f003 0308 	and.w	r3, r3, #8
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c50:	2340      	movs	r3, #64	; 0x40
 8000c52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	4619      	mov	r1, r3
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <HAL_TIM_MspPostInit+0x60>)
 8000c64:	f000 fdec 	bl	8001840 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000c68:	bf00      	nop
 8000c6a:	3720      	adds	r7, #32
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40000800 	.word	0x40000800
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40010c00 	.word	0x40010c00

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <NMI_Handler+0x4>

08000c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <MemManage_Handler+0x4>

08000c8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr

08000ca6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr

08000cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr

08000cbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc2:	f000 fc99 	bl	80015f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd4:	4a14      	ldr	r2, [pc, #80]	; (8000d28 <_sbrk+0x5c>)
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <_sbrk+0x60>)
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce0:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d102      	bne.n	8000cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <_sbrk+0x64>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <_sbrk+0x68>)
 8000cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d207      	bcs.n	8000d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cfc:	f002 fa24 	bl	8003148 <__errno>
 8000d00:	4603      	mov	r3, r0
 8000d02:	220c      	movs	r2, #12
 8000d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	e009      	b.n	8000d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d12:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <_sbrk+0x64>)
 8000d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20005000 	.word	0x20005000
 8000d2c:	00000400 	.word	0x00000400
 8000d30:	20000178 	.word	0x20000178
 8000d34:	200005a8 	.word	0x200005a8

08000d38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr

08000d44 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	2104      	movs	r1, #4
 8000d4c:	480a      	ldr	r0, [pc, #40]	; (8000d78 <ssd1306_Reset+0x34>)
 8000d4e:	f000 ff12 	bl	8001b76 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2110      	movs	r1, #16
 8000d56:	4809      	ldr	r0, [pc, #36]	; (8000d7c <ssd1306_Reset+0x38>)
 8000d58:	f000 ff0d 	bl	8001b76 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000d5c:	200a      	movs	r0, #10
 8000d5e:	f000 fc67 	bl	8001630 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8000d62:	2201      	movs	r2, #1
 8000d64:	2110      	movs	r1, #16
 8000d66:	4805      	ldr	r0, [pc, #20]	; (8000d7c <ssd1306_Reset+0x38>)
 8000d68:	f000 ff05 	bl	8001b76 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000d6c:	200a      	movs	r0, #10
 8000d6e:	f000 fc5f 	bl	8001630 <HAL_Delay>
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40010c00 	.word	0x40010c00
 8000d7c:	40010800 	.word	0x40010800

08000d80 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2104      	movs	r1, #4
 8000d8e:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <ssd1306_WriteCommand+0x40>)
 8000d90:	f000 fef1 	bl	8001b76 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8000d94:	2200      	movs	r2, #0
 8000d96:	2108      	movs	r1, #8
 8000d98:	480a      	ldr	r0, [pc, #40]	; (8000dc4 <ssd1306_WriteCommand+0x44>)
 8000d9a:	f000 feec 	bl	8001b76 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8000d9e:	1df9      	adds	r1, r7, #7
 8000da0:	f04f 33ff 	mov.w	r3, #4294967295
 8000da4:	2201      	movs	r2, #1
 8000da6:	4808      	ldr	r0, [pc, #32]	; (8000dc8 <ssd1306_WriteCommand+0x48>)
 8000da8:	f001 fb60 	bl	800246c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8000dac:	2201      	movs	r2, #1
 8000dae:	2104      	movs	r1, #4
 8000db0:	4803      	ldr	r0, [pc, #12]	; (8000dc0 <ssd1306_WriteCommand+0x40>)
 8000db2:	f000 fee0 	bl	8001b76 <HAL_GPIO_WritePin>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40010c00 	.word	0x40010c00
 8000dc4:	40010800 	.word	0x40010800
 8000dc8:	200000a4 	.word	0x200000a4

08000dcc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2104      	movs	r1, #4
 8000dda:	480c      	ldr	r0, [pc, #48]	; (8000e0c <ssd1306_WriteData+0x40>)
 8000ddc:	f000 fecb 	bl	8001b76 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8000de0:	2201      	movs	r2, #1
 8000de2:	2108      	movs	r1, #8
 8000de4:	480a      	ldr	r0, [pc, #40]	; (8000e10 <ssd1306_WriteData+0x44>)
 8000de6:	f000 fec6 	bl	8001b76 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	4807      	ldr	r0, [pc, #28]	; (8000e14 <ssd1306_WriteData+0x48>)
 8000df6:	f001 fb39 	bl	800246c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	2104      	movs	r1, #4
 8000dfe:	4803      	ldr	r0, [pc, #12]	; (8000e0c <ssd1306_WriteData+0x40>)
 8000e00:	f000 feb9 	bl	8001b76 <HAL_GPIO_WritePin>
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40010c00 	.word	0x40010c00
 8000e10:	40010800 	.word	0x40010800
 8000e14:	200000a4 	.word	0x200000a4

08000e18 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000e1c:	f7ff ff92 	bl	8000d44 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000e20:	2064      	movs	r0, #100	; 0x64
 8000e22:	f000 fc05 	bl	8001630 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000e26:	2000      	movs	r0, #0
 8000e28:	f000 fb5c 	bl	80014e4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000e2c:	2020      	movs	r0, #32
 8000e2e:	f7ff ffa7 	bl	8000d80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000e32:	2000      	movs	r0, #0
 8000e34:	f7ff ffa4 	bl	8000d80 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000e38:	20b0      	movs	r0, #176	; 0xb0
 8000e3a:	f7ff ffa1 	bl	8000d80 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000e3e:	20c8      	movs	r0, #200	; 0xc8
 8000e40:	f7ff ff9e 	bl	8000d80 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000e44:	2000      	movs	r0, #0
 8000e46:	f7ff ff9b 	bl	8000d80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000e4a:	2010      	movs	r0, #16
 8000e4c:	f7ff ff98 	bl	8000d80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000e50:	2040      	movs	r0, #64	; 0x40
 8000e52:	f7ff ff95 	bl	8000d80 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000e56:	20ff      	movs	r0, #255	; 0xff
 8000e58:	f000 fb30 	bl	80014bc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000e5c:	20a1      	movs	r0, #161	; 0xa1
 8000e5e:	f7ff ff8f 	bl	8000d80 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000e62:	20a6      	movs	r0, #166	; 0xa6
 8000e64:	f7ff ff8c 	bl	8000d80 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000e68:	20a8      	movs	r0, #168	; 0xa8
 8000e6a:	f7ff ff89 	bl	8000d80 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000e6e:	203f      	movs	r0, #63	; 0x3f
 8000e70:	f7ff ff86 	bl	8000d80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000e74:	20a4      	movs	r0, #164	; 0xa4
 8000e76:	f7ff ff83 	bl	8000d80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000e7a:	20d3      	movs	r0, #211	; 0xd3
 8000e7c:	f7ff ff80 	bl	8000d80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000e80:	2000      	movs	r0, #0
 8000e82:	f7ff ff7d 	bl	8000d80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000e86:	20d5      	movs	r0, #213	; 0xd5
 8000e88:	f7ff ff7a 	bl	8000d80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000e8c:	20f0      	movs	r0, #240	; 0xf0
 8000e8e:	f7ff ff77 	bl	8000d80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000e92:	20d9      	movs	r0, #217	; 0xd9
 8000e94:	f7ff ff74 	bl	8000d80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000e98:	2022      	movs	r0, #34	; 0x22
 8000e9a:	f7ff ff71 	bl	8000d80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000e9e:	20da      	movs	r0, #218	; 0xda
 8000ea0:	f7ff ff6e 	bl	8000d80 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000ea4:	2012      	movs	r0, #18
 8000ea6:	f7ff ff6b 	bl	8000d80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000eaa:	20db      	movs	r0, #219	; 0xdb
 8000eac:	f7ff ff68 	bl	8000d80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000eb0:	2020      	movs	r0, #32
 8000eb2:	f7ff ff65 	bl	8000d80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000eb6:	208d      	movs	r0, #141	; 0x8d
 8000eb8:	f7ff ff62 	bl	8000d80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000ebc:	2014      	movs	r0, #20
 8000ebe:	f7ff ff5f 	bl	8000d80 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f000 fb0e 	bl	80014e4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000ec8:	2000      	movs	r0, #0
 8000eca:	f000 f80f 	bl	8000eec <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000ece:	f000 f82f 	bl	8000f30 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000ed2:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <ssd1306_Init+0xd0>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <ssd1306_Init+0xd0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000ede:	4b02      	ldr	r3, [pc, #8]	; (8000ee8 <ssd1306_Init+0xd0>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	711a      	strb	r2, [r3, #4]
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	2000058c 	.word	0x2000058c

08000eec <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	e00d      	b.n	8000f18 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <ssd1306_Fill+0x1a>
 8000f02:	2100      	movs	r1, #0
 8000f04:	e000      	b.n	8000f08 <ssd1306_Fill+0x1c>
 8000f06:	21ff      	movs	r1, #255	; 0xff
 8000f08:	4a08      	ldr	r2, [pc, #32]	; (8000f2c <ssd1306_Fill+0x40>)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	460a      	mov	r2, r1
 8000f10:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	3301      	adds	r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8000f1e:	d3ed      	bcc.n	8000efc <ssd1306_Fill+0x10>
    }
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	2000017c 	.word	0x2000017c

08000f30 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000f36:	2300      	movs	r3, #0
 8000f38:	71fb      	strb	r3, [r7, #7]
 8000f3a:	e01a      	b.n	8000f72 <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	3b50      	subs	r3, #80	; 0x50
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ff1c 	bl	8000d80 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f7ff ff19 	bl	8000d80 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000f4e:	2010      	movs	r0, #16
 8000f50:	f7ff ff16 	bl	8000d80 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000f54:	79fa      	ldrb	r2, [r7, #7]
 8000f56:	4613      	mov	r3, r2
 8000f58:	019b      	lsls	r3, r3, #6
 8000f5a:	4413      	add	r3, r2
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <ssd1306_UpdateScreen+0x54>)
 8000f62:	4413      	add	r3, r2
 8000f64:	2182      	movs	r1, #130	; 0x82
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ff30 	bl	8000dcc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	71fb      	strb	r3, [r7, #7]
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	2b07      	cmp	r3, #7
 8000f76:	d9e1      	bls.n	8000f3c <ssd1306_UpdateScreen+0xc>
    }
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	2000017c 	.word	0x2000017c

08000f88 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000f88:	b490      	push	{r4, r7}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
 8000f92:	460b      	mov	r3, r1
 8000f94:	71bb      	strb	r3, [r7, #6]
 8000f96:	4613      	mov	r3, r2
 8000f98:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2b81      	cmp	r3, #129	; 0x81
 8000f9e:	d849      	bhi.n	8001034 <ssd1306_DrawPixel+0xac>
 8000fa0:	79bb      	ldrb	r3, [r7, #6]
 8000fa2:	2b3f      	cmp	r3, #63	; 0x3f
 8000fa4:	d846      	bhi.n	8001034 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000fa6:	797b      	ldrb	r3, [r7, #5]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d120      	bne.n	8000fee <ssd1306_DrawPixel+0x66>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000fac:	79fa      	ldrb	r2, [r7, #7]
 8000fae:	79bb      	ldrb	r3, [r7, #6]
 8000fb0:	08db      	lsrs	r3, r3, #3
 8000fb2:	b2d8      	uxtb	r0, r3
 8000fb4:	4601      	mov	r1, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	019b      	lsls	r3, r3, #6
 8000fba:	440b      	add	r3, r1
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	4413      	add	r3, r2
 8000fc0:	4a1f      	ldr	r2, [pc, #124]	; (8001040 <ssd1306_DrawPixel+0xb8>)
 8000fc2:	5cd3      	ldrb	r3, [r2, r3]
 8000fc4:	b25a      	sxtb	r2, r3
 8000fc6:	79bb      	ldrb	r3, [r7, #6]
 8000fc8:	f003 0307 	and.w	r3, r3, #7
 8000fcc:	2101      	movs	r1, #1
 8000fce:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd2:	b25b      	sxtb	r3, r3
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	b25c      	sxtb	r4, r3
 8000fd8:	79fa      	ldrb	r2, [r7, #7]
 8000fda:	4601      	mov	r1, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	019b      	lsls	r3, r3, #6
 8000fe0:	440b      	add	r3, r1
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	4413      	add	r3, r2
 8000fe6:	b2e1      	uxtb	r1, r4
 8000fe8:	4a15      	ldr	r2, [pc, #84]	; (8001040 <ssd1306_DrawPixel+0xb8>)
 8000fea:	54d1      	strb	r1, [r2, r3]
 8000fec:	e023      	b.n	8001036 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000fee:	79fa      	ldrb	r2, [r7, #7]
 8000ff0:	79bb      	ldrb	r3, [r7, #6]
 8000ff2:	08db      	lsrs	r3, r3, #3
 8000ff4:	b2d8      	uxtb	r0, r3
 8000ff6:	4601      	mov	r1, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	019b      	lsls	r3, r3, #6
 8000ffc:	440b      	add	r3, r1
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	4413      	add	r3, r2
 8001002:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <ssd1306_DrawPixel+0xb8>)
 8001004:	5cd3      	ldrb	r3, [r2, r3]
 8001006:	b25a      	sxtb	r2, r3
 8001008:	79bb      	ldrb	r3, [r7, #6]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	2101      	movs	r1, #1
 8001010:	fa01 f303 	lsl.w	r3, r1, r3
 8001014:	b25b      	sxtb	r3, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	b25b      	sxtb	r3, r3
 800101a:	4013      	ands	r3, r2
 800101c:	b25c      	sxtb	r4, r3
 800101e:	79fa      	ldrb	r2, [r7, #7]
 8001020:	4601      	mov	r1, r0
 8001022:	460b      	mov	r3, r1
 8001024:	019b      	lsls	r3, r3, #6
 8001026:	440b      	add	r3, r1
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	4413      	add	r3, r2
 800102c:	b2e1      	uxtb	r1, r4
 800102e:	4a04      	ldr	r2, [pc, #16]	; (8001040 <ssd1306_DrawPixel+0xb8>)
 8001030:	54d1      	strb	r1, [r2, r3]
 8001032:	e000      	b.n	8001036 <ssd1306_DrawPixel+0xae>
        return;
 8001034:	bf00      	nop
    }
}
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bc90      	pop	{r4, r7}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	2000017c 	.word	0x2000017c

08001044 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b089      	sub	sp, #36	; 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	4604      	mov	r4, r0
 800104c:	1d38      	adds	r0, r7, #4
 800104e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001052:	461a      	mov	r2, r3
 8001054:	4623      	mov	r3, r4
 8001056:	73fb      	strb	r3, [r7, #15]
 8001058:	4613      	mov	r3, r2
 800105a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	2b1f      	cmp	r3, #31
 8001060:	d902      	bls.n	8001068 <ssd1306_WriteChar+0x24>
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	2b7e      	cmp	r3, #126	; 0x7e
 8001066:	d901      	bls.n	800106c <ssd1306_WriteChar+0x28>
        return 0;
 8001068:	2300      	movs	r3, #0
 800106a:	e06d      	b.n	8001148 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800106c:	4b38      	ldr	r3, [pc, #224]	; (8001150 <ssd1306_WriteChar+0x10c>)
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	793b      	ldrb	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	2b82      	cmp	r3, #130	; 0x82
 8001078:	dc06      	bgt.n	8001088 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800107a:	4b35      	ldr	r3, [pc, #212]	; (8001150 <ssd1306_WriteChar+0x10c>)
 800107c:	885b      	ldrh	r3, [r3, #2]
 800107e:	461a      	mov	r2, r3
 8001080:	797b      	ldrb	r3, [r7, #5]
 8001082:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001084:	2b40      	cmp	r3, #64	; 0x40
 8001086:	dd01      	ble.n	800108c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001088:	2300      	movs	r3, #0
 800108a:	e05d      	b.n	8001148 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
 8001090:	e04c      	b.n	800112c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	3b20      	subs	r3, #32
 8001098:	7979      	ldrb	r1, [r7, #5]
 800109a:	fb01 f303 	mul.w	r3, r1, r3
 800109e:	4619      	mov	r1, r3
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	440b      	add	r3, r1
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	4413      	add	r3, r2
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80010ac:	2300      	movs	r3, #0
 80010ae:	61bb      	str	r3, [r7, #24]
 80010b0:	e034      	b.n	800111c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d012      	beq.n	80010e8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80010c2:	4b23      	ldr	r3, [pc, #140]	; (8001150 <ssd1306_WriteChar+0x10c>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	4413      	add	r3, r2
 80010ce:	b2d8      	uxtb	r0, r3
 80010d0:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <ssd1306_WriteChar+0x10c>)
 80010d2:	885b      	ldrh	r3, [r3, #2]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	4413      	add	r3, r2
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	7bba      	ldrb	r2, [r7, #14]
 80010e0:	4619      	mov	r1, r3
 80010e2:	f7ff ff51 	bl	8000f88 <ssd1306_DrawPixel>
 80010e6:	e016      	b.n	8001116 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80010e8:	4b19      	ldr	r3, [pc, #100]	; (8001150 <ssd1306_WriteChar+0x10c>)
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4413      	add	r3, r2
 80010f4:	b2d8      	uxtb	r0, r3
 80010f6:	4b16      	ldr	r3, [pc, #88]	; (8001150 <ssd1306_WriteChar+0x10c>)
 80010f8:	885b      	ldrh	r3, [r3, #2]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	4413      	add	r3, r2
 8001102:	b2d9      	uxtb	r1, r3
 8001104:	7bbb      	ldrb	r3, [r7, #14]
 8001106:	2b00      	cmp	r3, #0
 8001108:	bf0c      	ite	eq
 800110a:	2301      	moveq	r3, #1
 800110c:	2300      	movne	r3, #0
 800110e:	b2db      	uxtb	r3, r3
 8001110:	461a      	mov	r2, r3
 8001112:	f7ff ff39 	bl	8000f88 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	3301      	adds	r3, #1
 800111a:	61bb      	str	r3, [r7, #24]
 800111c:	793b      	ldrb	r3, [r7, #4]
 800111e:	461a      	mov	r2, r3
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	4293      	cmp	r3, r2
 8001124:	d3c5      	bcc.n	80010b2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3301      	adds	r3, #1
 800112a:	61fb      	str	r3, [r7, #28]
 800112c:	797b      	ldrb	r3, [r7, #5]
 800112e:	461a      	mov	r2, r3
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	4293      	cmp	r3, r2
 8001134:	d3ad      	bcc.n	8001092 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <ssd1306_WriteChar+0x10c>)
 8001138:	881a      	ldrh	r2, [r3, #0]
 800113a:	793b      	ldrb	r3, [r7, #4]
 800113c:	b29b      	uxth	r3, r3
 800113e:	4413      	add	r3, r2
 8001140:	b29a      	uxth	r2, r3
 8001142:	4b03      	ldr	r3, [pc, #12]	; (8001150 <ssd1306_WriteChar+0x10c>)
 8001144:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001146:	7bfb      	ldrb	r3, [r7, #15]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3724      	adds	r7, #36	; 0x24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd90      	pop	{r4, r7, pc}
 8001150:	2000058c 	.word	0x2000058c

08001154 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	1d38      	adds	r0, r7, #4
 800115e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001162:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001164:	e012      	b.n	800118c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	7818      	ldrb	r0, [r3, #0]
 800116a:	78fb      	ldrb	r3, [r7, #3]
 800116c:	1d3a      	adds	r2, r7, #4
 800116e:	ca06      	ldmia	r2, {r1, r2}
 8001170:	f7ff ff68 	bl	8001044 <ssd1306_WriteChar>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	429a      	cmp	r2, r3
 800117e:	d002      	beq.n	8001186 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	e008      	b.n	8001198 <ssd1306_WriteString+0x44>
        }
        str++;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	3301      	adds	r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1e8      	bne.n	8001166 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	781b      	ldrb	r3, [r3, #0]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	460a      	mov	r2, r1
 80011aa:	71fb      	strb	r3, [r7, #7]
 80011ac:	4613      	mov	r3, r2
 80011ae:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <ssd1306_SetCursor+0x2c>)
 80011b6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80011b8:	79bb      	ldrb	r3, [r7, #6]
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <ssd1306_SetCursor+0x2c>)
 80011be:	805a      	strh	r2, [r3, #2]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	2000058c 	.word	0x2000058c

080011d0 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b089      	sub	sp, #36	; 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4604      	mov	r4, r0
 80011d8:	4608      	mov	r0, r1
 80011da:	4611      	mov	r1, r2
 80011dc:	461a      	mov	r2, r3
 80011de:	4623      	mov	r3, r4
 80011e0:	71fb      	strb	r3, [r7, #7]
 80011e2:	4603      	mov	r3, r0
 80011e4:	71bb      	strb	r3, [r7, #6]
 80011e6:	460b      	mov	r3, r1
 80011e8:	717b      	strb	r3, [r7, #5]
 80011ea:	4613      	mov	r3, r2
 80011ec:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80011ee:	797a      	ldrb	r2, [r7, #5]
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	bfb8      	it	lt
 80011f8:	425b      	neglt	r3, r3
 80011fa:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80011fc:	793a      	ldrb	r2, [r7, #4]
 80011fe:	79bb      	ldrb	r3, [r7, #6]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	bfb8      	it	lt
 8001206:	425b      	neglt	r3, r3
 8001208:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 800120a:	79fa      	ldrb	r2, [r7, #7]
 800120c:	797b      	ldrb	r3, [r7, #5]
 800120e:	429a      	cmp	r2, r3
 8001210:	d201      	bcs.n	8001216 <ssd1306_Line+0x46>
 8001212:	2301      	movs	r3, #1
 8001214:	e001      	b.n	800121a <ssd1306_Line+0x4a>
 8001216:	f04f 33ff 	mov.w	r3, #4294967295
 800121a:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 800121c:	79ba      	ldrb	r2, [r7, #6]
 800121e:	793b      	ldrb	r3, [r7, #4]
 8001220:	429a      	cmp	r2, r3
 8001222:	d201      	bcs.n	8001228 <ssd1306_Line+0x58>
 8001224:	2301      	movs	r3, #1
 8001226:	e001      	b.n	800122c <ssd1306_Line+0x5c>
 8001228:	f04f 33ff 	mov.w	r3, #4294967295
 800122c:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8001236:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800123a:	7939      	ldrb	r1, [r7, #4]
 800123c:	797b      	ldrb	r3, [r7, #5]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fea2 	bl	8000f88 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8001244:	e024      	b.n	8001290 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8001246:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800124a:	79b9      	ldrb	r1, [r7, #6]
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fe9a 	bl	8000f88 <ssd1306_DrawPixel>
        error2 = error * 2;
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	425b      	negs	r3, r3
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	429a      	cmp	r2, r3
 8001262:	dd08      	ble.n	8001276 <ssd1306_Line+0xa6>
            error -= deltaY;
 8001264:	69fa      	ldr	r2, [r7, #28]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	b2da      	uxtb	r2, r3
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	4413      	add	r3, r2
 8001274:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	429a      	cmp	r2, r3
 800127c:	da08      	bge.n	8001290 <ssd1306_Line+0xc0>
            error += deltaX;
 800127e:	69fa      	ldr	r2, [r7, #28]
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	4413      	add	r3, r2
 8001284:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	b2da      	uxtb	r2, r3
 800128a:	79bb      	ldrb	r3, [r7, #6]
 800128c:	4413      	add	r3, r2
 800128e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8001290:	79fa      	ldrb	r2, [r7, #7]
 8001292:	797b      	ldrb	r3, [r7, #5]
 8001294:	429a      	cmp	r2, r3
 8001296:	d1d6      	bne.n	8001246 <ssd1306_Line+0x76>
 8001298:	79ba      	ldrb	r2, [r7, #6]
 800129a:	793b      	ldrb	r3, [r7, #4]
 800129c:	429a      	cmp	r2, r3
 800129e:	d1d2      	bne.n	8001246 <ssd1306_Line+0x76>
        }
    }
    return;
 80012a0:	bf00      	nop
}
 80012a2:	3724      	adds	r7, #36	; 0x24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd90      	pop	{r4, r7, pc}

080012a8 <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b087      	sub	sp, #28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4604      	mov	r4, r0
 80012b0:	4608      	mov	r0, r1
 80012b2:	4611      	mov	r1, r2
 80012b4:	461a      	mov	r2, r3
 80012b6:	4623      	mov	r3, r4
 80012b8:	71fb      	strb	r3, [r7, #7]
 80012ba:	4603      	mov	r3, r0
 80012bc:	71bb      	strb	r3, [r7, #6]
 80012be:	460b      	mov	r3, r1
 80012c0:	717b      	strb	r3, [r7, #5]
 80012c2:	4613      	mov	r3, r2
 80012c4:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 80012c6:	797b      	ldrb	r3, [r7, #5]
 80012c8:	425b      	negs	r3, r3
 80012ca:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 80012d0:	797b      	ldrb	r3, [r7, #5]
 80012d2:	f1c3 0301 	rsb	r3, r3, #1
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	2b81      	cmp	r3, #129	; 0x81
 80012de:	d865      	bhi.n	80013ac <ssd1306_DrawCircle+0x104>
 80012e0:	79bb      	ldrb	r3, [r7, #6]
 80012e2:	2b3f      	cmp	r3, #63	; 0x3f
 80012e4:	d862      	bhi.n	80013ac <ssd1306_DrawCircle+0x104>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	79fa      	ldrb	r2, [r7, #7]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	b2d8      	uxtb	r0, r3
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	79bb      	ldrb	r3, [r7, #6]
 80012f6:	4413      	add	r3, r2
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	793a      	ldrb	r2, [r7, #4]
 80012fc:	4619      	mov	r1, r3
 80012fe:	f7ff fe43 	bl	8000f88 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	b2da      	uxtb	r2, r3
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	4413      	add	r3, r2
 800130a:	b2d8      	uxtb	r0, r3
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	b2da      	uxtb	r2, r3
 8001310:	79bb      	ldrb	r3, [r7, #6]
 8001312:	4413      	add	r3, r2
 8001314:	b2db      	uxtb	r3, r3
 8001316:	793a      	ldrb	r2, [r7, #4]
 8001318:	4619      	mov	r1, r3
 800131a:	f7ff fe35 	bl	8000f88 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	b2da      	uxtb	r2, r3
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	4413      	add	r3, r2
 8001326:	b2d8      	uxtb	r0, r3
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	79ba      	ldrb	r2, [r7, #6]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	b2db      	uxtb	r3, r3
 8001332:	793a      	ldrb	r2, [r7, #4]
 8001334:	4619      	mov	r1, r3
 8001336:	f7ff fe27 	bl	8000f88 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	b2db      	uxtb	r3, r3
 800133e:	79fa      	ldrb	r2, [r7, #7]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	b2d8      	uxtb	r0, r3
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	79ba      	ldrb	r2, [r7, #6]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	b2db      	uxtb	r3, r3
 800134e:	793a      	ldrb	r2, [r7, #4]
 8001350:	4619      	mov	r1, r3
 8001352:	f7ff fe19 	bl	8000f88 <ssd1306_DrawPixel>
        e2 = err;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	429a      	cmp	r2, r3
 8001360:	dc13      	bgt.n	800138a <ssd1306_DrawCircle+0xe2>
            y++;
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	3301      	adds	r3, #1
 8001366:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	3301      	adds	r3, #1
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	4413      	add	r3, r2
 8001372:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	425b      	negs	r3, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	429a      	cmp	r2, r3
 800137c:	d105      	bne.n	800138a <ssd1306_DrawCircle+0xe2>
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	429a      	cmp	r2, r3
 8001384:	dc01      	bgt.n	800138a <ssd1306_DrawCircle+0xe2>
                e2 = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	429a      	cmp	r2, r3
 8001390:	dd08      	ble.n	80013a4 <ssd1306_DrawCircle+0xfc>
            x++;
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	3301      	adds	r3, #1
 8001396:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	3301      	adds	r3, #1
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	4413      	add	r3, r2
 80013a2:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	dd9d      	ble.n	80012e6 <ssd1306_DrawCircle+0x3e>

    return;
 80013aa:	e000      	b.n	80013ae <ssd1306_DrawCircle+0x106>
        return;
 80013ac:	bf00      	nop
}
 80013ae:	371c      	adds	r7, #28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd90      	pop	{r4, r7, pc}

080013b4 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80013b4:	b590      	push	{r4, r7, lr}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af02      	add	r7, sp, #8
 80013ba:	4604      	mov	r4, r0
 80013bc:	4608      	mov	r0, r1
 80013be:	4611      	mov	r1, r2
 80013c0:	461a      	mov	r2, r3
 80013c2:	4623      	mov	r3, r4
 80013c4:	71fb      	strb	r3, [r7, #7]
 80013c6:	4603      	mov	r3, r0
 80013c8:	71bb      	strb	r3, [r7, #6]
 80013ca:	460b      	mov	r3, r1
 80013cc:	717b      	strb	r3, [r7, #5]
 80013ce:	4613      	mov	r3, r2
 80013d0:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 80013d2:	79bc      	ldrb	r4, [r7, #6]
 80013d4:	797a      	ldrb	r2, [r7, #5]
 80013d6:	79b9      	ldrb	r1, [r7, #6]
 80013d8:	79f8      	ldrb	r0, [r7, #7]
 80013da:	7e3b      	ldrb	r3, [r7, #24]
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	4623      	mov	r3, r4
 80013e0:	f7ff fef6 	bl	80011d0 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 80013e4:	793c      	ldrb	r4, [r7, #4]
 80013e6:	797a      	ldrb	r2, [r7, #5]
 80013e8:	79b9      	ldrb	r1, [r7, #6]
 80013ea:	7978      	ldrb	r0, [r7, #5]
 80013ec:	7e3b      	ldrb	r3, [r7, #24]
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	4623      	mov	r3, r4
 80013f2:	f7ff feed 	bl	80011d0 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 80013f6:	793c      	ldrb	r4, [r7, #4]
 80013f8:	79fa      	ldrb	r2, [r7, #7]
 80013fa:	7939      	ldrb	r1, [r7, #4]
 80013fc:	7978      	ldrb	r0, [r7, #5]
 80013fe:	7e3b      	ldrb	r3, [r7, #24]
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	4623      	mov	r3, r4
 8001404:	f7ff fee4 	bl	80011d0 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8001408:	79bc      	ldrb	r4, [r7, #6]
 800140a:	79fa      	ldrb	r2, [r7, #7]
 800140c:	7939      	ldrb	r1, [r7, #4]
 800140e:	79f8      	ldrb	r0, [r7, #7]
 8001410:	7e3b      	ldrb	r3, [r7, #24]
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	4623      	mov	r3, r4
 8001416:	f7ff fedb 	bl	80011d0 <ssd1306_Line>

    return;
 800141a:	bf00      	nop
}
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	bd90      	pop	{r4, r7, pc}

08001422 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001422:	b590      	push	{r4, r7, lr}
 8001424:	b085      	sub	sp, #20
 8001426:	af00      	add	r7, sp, #0
 8001428:	4604      	mov	r4, r0
 800142a:	4608      	mov	r0, r1
 800142c:	4611      	mov	r1, r2
 800142e:	461a      	mov	r2, r3
 8001430:	4623      	mov	r3, r4
 8001432:	71fb      	strb	r3, [r7, #7]
 8001434:	4603      	mov	r3, r0
 8001436:	71bb      	strb	r3, [r7, #6]
 8001438:	460b      	mov	r3, r1
 800143a:	717b      	strb	r3, [r7, #5]
 800143c:	4613      	mov	r3, r2
 800143e:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8001440:	79fa      	ldrb	r2, [r7, #7]
 8001442:	797b      	ldrb	r3, [r7, #5]
 8001444:	4293      	cmp	r3, r2
 8001446:	bf28      	it	cs
 8001448:	4613      	movcs	r3, r2
 800144a:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 800144c:	797a      	ldrb	r2, [r7, #5]
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	4293      	cmp	r3, r2
 8001452:	bf38      	it	cc
 8001454:	4613      	movcc	r3, r2
 8001456:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8001458:	79ba      	ldrb	r2, [r7, #6]
 800145a:	793b      	ldrb	r3, [r7, #4]
 800145c:	4293      	cmp	r3, r2
 800145e:	bf28      	it	cs
 8001460:	4613      	movcs	r3, r2
 8001462:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8001464:	793a      	ldrb	r2, [r7, #4]
 8001466:	79bb      	ldrb	r3, [r7, #6]
 8001468:	4293      	cmp	r3, r2
 800146a:	bf38      	it	cc
 800146c:	4613      	movcc	r3, r2
 800146e:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001470:	7afb      	ldrb	r3, [r7, #11]
 8001472:	73fb      	strb	r3, [r7, #15]
 8001474:	e016      	b.n	80014a4 <ssd1306_FillRectangle+0x82>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001476:	7b7b      	ldrb	r3, [r7, #13]
 8001478:	73bb      	strb	r3, [r7, #14]
 800147a:	e009      	b.n	8001490 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 800147c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001480:	7bf9      	ldrb	r1, [r7, #15]
 8001482:	7bbb      	ldrb	r3, [r7, #14]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fd7f 	bl	8000f88 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800148a:	7bbb      	ldrb	r3, [r7, #14]
 800148c:	3301      	adds	r3, #1
 800148e:	73bb      	strb	r3, [r7, #14]
 8001490:	7bba      	ldrb	r2, [r7, #14]
 8001492:	7b3b      	ldrb	r3, [r7, #12]
 8001494:	429a      	cmp	r2, r3
 8001496:	d802      	bhi.n	800149e <ssd1306_FillRectangle+0x7c>
 8001498:	7bbb      	ldrb	r3, [r7, #14]
 800149a:	2b81      	cmp	r3, #129	; 0x81
 800149c:	d9ee      	bls.n	800147c <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	3301      	adds	r3, #1
 80014a2:	73fb      	strb	r3, [r7, #15]
 80014a4:	7bfa      	ldrb	r2, [r7, #15]
 80014a6:	7abb      	ldrb	r3, [r7, #10]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d803      	bhi.n	80014b4 <ssd1306_FillRectangle+0x92>
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	2b3f      	cmp	r3, #63	; 0x3f
 80014b0:	d9e1      	bls.n	8001476 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 80014b2:	bf00      	nop
 80014b4:	bf00      	nop
}
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd90      	pop	{r4, r7, pc}

080014bc <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80014c6:	2381      	movs	r3, #129	; 0x81
 80014c8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fc57 	bl	8000d80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fc53 	bl	8000d80 <ssd1306_WriteCommand>
}
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80014f4:	23af      	movs	r3, #175	; 0xaf
 80014f6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <ssd1306_SetDisplayOn+0x38>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	715a      	strb	r2, [r3, #5]
 80014fe:	e004      	b.n	800150a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001500:	23ae      	movs	r3, #174	; 0xae
 8001502:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <ssd1306_SetDisplayOn+0x38>)
 8001506:	2200      	movs	r2, #0
 8001508:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800150a:	7bfb      	ldrb	r3, [r7, #15]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fc37 	bl	8000d80 <ssd1306_WriteCommand>
}
 8001512:	bf00      	nop
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	2000058c 	.word	0x2000058c

08001520 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001520:	f7ff fc0a 	bl	8000d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001524:	480b      	ldr	r0, [pc, #44]	; (8001554 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001526:	490c      	ldr	r1, [pc, #48]	; (8001558 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001528:	4a0c      	ldr	r2, [pc, #48]	; (800155c <LoopFillZerobss+0x16>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800152c:	e002      	b.n	8001534 <LoopCopyDataInit>

0800152e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001532:	3304      	adds	r3, #4

08001534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001538:	d3f9      	bcc.n	800152e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800153a:	4a09      	ldr	r2, [pc, #36]	; (8001560 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800153c:	4c09      	ldr	r4, [pc, #36]	; (8001564 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001540:	e001      	b.n	8001546 <LoopFillZerobss>

08001542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001544:	3204      	adds	r2, #4

08001546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001548:	d3fb      	bcc.n	8001542 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800154a:	f001 fe03 	bl	8003154 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800154e:	f7ff f92f 	bl	80007b0 <main>
  bx lr
 8001552:	4770      	bx	lr
  ldr r0, =_sdata
 8001554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001558:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800155c:	08005034 	.word	0x08005034
  ldr r2, =_sbss
 8001560:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001564:	200005a8 	.word	0x200005a8

08001568 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001568:	e7fe      	b.n	8001568 <ADC1_2_IRQHandler>
	...

0800156c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <HAL_Init+0x28>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a07      	ldr	r2, [pc, #28]	; (8001594 <HAL_Init+0x28>)
 8001576:	f043 0310 	orr.w	r3, r3, #16
 800157a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800157c:	2003      	movs	r0, #3
 800157e:	f000 f92b 	bl	80017d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001582:	200f      	movs	r0, #15
 8001584:	f000 f808 	bl	8001598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001588:	f7ff fab8 	bl	8000afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40022000 	.word	0x40022000

08001598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_InitTick+0x54>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_InitTick+0x58>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4619      	mov	r1, r3
 80015aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 f935 	bl	8001826 <HAL_SYSTICK_Config>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e00e      	b.n	80015e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b0f      	cmp	r3, #15
 80015ca:	d80a      	bhi.n	80015e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015cc:	2200      	movs	r2, #0
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295
 80015d4:	f000 f90b 	bl	80017ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d8:	4a06      	ldr	r2, [pc, #24]	; (80015f4 <HAL_InitTick+0x5c>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	e000      	b.n	80015e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000008 	.word	0x20000008
 80015f0:	20000020 	.word	0x20000020
 80015f4:	2000001c 	.word	0x2000001c

080015f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <HAL_IncTick+0x1c>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	4b05      	ldr	r3, [pc, #20]	; (8001618 <HAL_IncTick+0x20>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4413      	add	r3, r2
 8001608:	4a03      	ldr	r2, [pc, #12]	; (8001618 <HAL_IncTick+0x20>)
 800160a:	6013      	str	r3, [r2, #0]
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	20000020 	.word	0x20000020
 8001618:	20000594 	.word	0x20000594

0800161c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return uwTick;
 8001620:	4b02      	ldr	r3, [pc, #8]	; (800162c <HAL_GetTick+0x10>)
 8001622:	681b      	ldr	r3, [r3, #0]
}
 8001624:	4618      	mov	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	20000594 	.word	0x20000594

08001630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001638:	f7ff fff0 	bl	800161c <HAL_GetTick>
 800163c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001648:	d005      	beq.n	8001656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <HAL_Delay+0x44>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	461a      	mov	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4413      	add	r3, r2
 8001654:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001656:	bf00      	nop
 8001658:	f7ff ffe0 	bl	800161c <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	429a      	cmp	r2, r3
 8001666:	d8f7      	bhi.n	8001658 <HAL_Delay+0x28>
  {
  }
}
 8001668:	bf00      	nop
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000020 	.word	0x20000020

08001678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001694:	4013      	ands	r3, r2
 8001696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016aa:	4a04      	ldr	r2, [pc, #16]	; (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	60d3      	str	r3, [r2, #12]
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <__NVIC_GetPriorityGrouping+0x18>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	0a1b      	lsrs	r3, r3, #8
 80016ca:	f003 0307 	and.w	r3, r3, #7
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	db0a      	blt.n	8001706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	490c      	ldr	r1, [pc, #48]	; (8001728 <__NVIC_SetPriority+0x4c>)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	0112      	lsls	r2, r2, #4
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	440b      	add	r3, r1
 8001700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001704:	e00a      	b.n	800171c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4908      	ldr	r1, [pc, #32]	; (800172c <__NVIC_SetPriority+0x50>)
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	3b04      	subs	r3, #4
 8001714:	0112      	lsls	r2, r2, #4
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	440b      	add	r3, r1
 800171a:	761a      	strb	r2, [r3, #24]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000e100 	.word	0xe000e100
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	; 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f1c3 0307 	rsb	r3, r3, #7
 800174a:	2b04      	cmp	r3, #4
 800174c:	bf28      	it	cs
 800174e:	2304      	movcs	r3, #4
 8001750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3304      	adds	r3, #4
 8001756:	2b06      	cmp	r3, #6
 8001758:	d902      	bls.n	8001760 <NVIC_EncodePriority+0x30>
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3b03      	subs	r3, #3
 800175e:	e000      	b.n	8001762 <NVIC_EncodePriority+0x32>
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	f04f 32ff 	mov.w	r2, #4294967295
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43da      	mvns	r2, r3
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	401a      	ands	r2, r3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001778:	f04f 31ff 	mov.w	r1, #4294967295
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	fa01 f303 	lsl.w	r3, r1, r3
 8001782:	43d9      	mvns	r1, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	4313      	orrs	r3, r2
         );
}
 800178a:	4618      	mov	r0, r3
 800178c:	3724      	adds	r7, #36	; 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr

08001794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3b01      	subs	r3, #1
 80017a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a4:	d301      	bcc.n	80017aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a6:	2301      	movs	r3, #1
 80017a8:	e00f      	b.n	80017ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017aa:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <SysTick_Config+0x40>)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017b2:	210f      	movs	r1, #15
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295
 80017b8:	f7ff ff90 	bl	80016dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <SysTick_Config+0x40>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017c2:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <SysTick_Config+0x40>)
 80017c4:	2207      	movs	r2, #7
 80017c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	e000e010 	.word	0xe000e010

080017d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff ff49 	bl	8001678 <__NVIC_SetPriorityGrouping>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b086      	sub	sp, #24
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	4603      	mov	r3, r0
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
 80017fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001800:	f7ff ff5e 	bl	80016c0 <__NVIC_GetPriorityGrouping>
 8001804:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	68b9      	ldr	r1, [r7, #8]
 800180a:	6978      	ldr	r0, [r7, #20]
 800180c:	f7ff ff90 	bl	8001730 <NVIC_EncodePriority>
 8001810:	4602      	mov	r2, r0
 8001812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001816:	4611      	mov	r1, r2
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff5f 	bl	80016dc <__NVIC_SetPriority>
}
 800181e:	bf00      	nop
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ffb0 	bl	8001794 <SysTick_Config>
 8001834:	4603      	mov	r3, r0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001840:	b480      	push	{r7}
 8001842:	b08b      	sub	sp, #44	; 0x2c
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800184a:	2300      	movs	r3, #0
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800184e:	2300      	movs	r3, #0
 8001850:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001852:	e169      	b.n	8001b28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001854:	2201      	movs	r2, #1
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	69fa      	ldr	r2, [r7, #28]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	429a      	cmp	r2, r3
 800186e:	f040 8158 	bne.w	8001b22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	4a9a      	ldr	r2, [pc, #616]	; (8001ae0 <HAL_GPIO_Init+0x2a0>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d05e      	beq.n	800193a <HAL_GPIO_Init+0xfa>
 800187c:	4a98      	ldr	r2, [pc, #608]	; (8001ae0 <HAL_GPIO_Init+0x2a0>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d875      	bhi.n	800196e <HAL_GPIO_Init+0x12e>
 8001882:	4a98      	ldr	r2, [pc, #608]	; (8001ae4 <HAL_GPIO_Init+0x2a4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d058      	beq.n	800193a <HAL_GPIO_Init+0xfa>
 8001888:	4a96      	ldr	r2, [pc, #600]	; (8001ae4 <HAL_GPIO_Init+0x2a4>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d86f      	bhi.n	800196e <HAL_GPIO_Init+0x12e>
 800188e:	4a96      	ldr	r2, [pc, #600]	; (8001ae8 <HAL_GPIO_Init+0x2a8>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d052      	beq.n	800193a <HAL_GPIO_Init+0xfa>
 8001894:	4a94      	ldr	r2, [pc, #592]	; (8001ae8 <HAL_GPIO_Init+0x2a8>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d869      	bhi.n	800196e <HAL_GPIO_Init+0x12e>
 800189a:	4a94      	ldr	r2, [pc, #592]	; (8001aec <HAL_GPIO_Init+0x2ac>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d04c      	beq.n	800193a <HAL_GPIO_Init+0xfa>
 80018a0:	4a92      	ldr	r2, [pc, #584]	; (8001aec <HAL_GPIO_Init+0x2ac>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d863      	bhi.n	800196e <HAL_GPIO_Init+0x12e>
 80018a6:	4a92      	ldr	r2, [pc, #584]	; (8001af0 <HAL_GPIO_Init+0x2b0>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d046      	beq.n	800193a <HAL_GPIO_Init+0xfa>
 80018ac:	4a90      	ldr	r2, [pc, #576]	; (8001af0 <HAL_GPIO_Init+0x2b0>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d85d      	bhi.n	800196e <HAL_GPIO_Init+0x12e>
 80018b2:	2b12      	cmp	r3, #18
 80018b4:	d82a      	bhi.n	800190c <HAL_GPIO_Init+0xcc>
 80018b6:	2b12      	cmp	r3, #18
 80018b8:	d859      	bhi.n	800196e <HAL_GPIO_Init+0x12e>
 80018ba:	a201      	add	r2, pc, #4	; (adr r2, 80018c0 <HAL_GPIO_Init+0x80>)
 80018bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c0:	0800193b 	.word	0x0800193b
 80018c4:	08001915 	.word	0x08001915
 80018c8:	08001927 	.word	0x08001927
 80018cc:	08001969 	.word	0x08001969
 80018d0:	0800196f 	.word	0x0800196f
 80018d4:	0800196f 	.word	0x0800196f
 80018d8:	0800196f 	.word	0x0800196f
 80018dc:	0800196f 	.word	0x0800196f
 80018e0:	0800196f 	.word	0x0800196f
 80018e4:	0800196f 	.word	0x0800196f
 80018e8:	0800196f 	.word	0x0800196f
 80018ec:	0800196f 	.word	0x0800196f
 80018f0:	0800196f 	.word	0x0800196f
 80018f4:	0800196f 	.word	0x0800196f
 80018f8:	0800196f 	.word	0x0800196f
 80018fc:	0800196f 	.word	0x0800196f
 8001900:	0800196f 	.word	0x0800196f
 8001904:	0800191d 	.word	0x0800191d
 8001908:	08001931 	.word	0x08001931
 800190c:	4a79      	ldr	r2, [pc, #484]	; (8001af4 <HAL_GPIO_Init+0x2b4>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d013      	beq.n	800193a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001912:	e02c      	b.n	800196e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	623b      	str	r3, [r7, #32]
          break;
 800191a:	e029      	b.n	8001970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	3304      	adds	r3, #4
 8001922:	623b      	str	r3, [r7, #32]
          break;
 8001924:	e024      	b.n	8001970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	3308      	adds	r3, #8
 800192c:	623b      	str	r3, [r7, #32]
          break;
 800192e:	e01f      	b.n	8001970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	330c      	adds	r3, #12
 8001936:	623b      	str	r3, [r7, #32]
          break;
 8001938:	e01a      	b.n	8001970 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d102      	bne.n	8001948 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001942:	2304      	movs	r3, #4
 8001944:	623b      	str	r3, [r7, #32]
          break;
 8001946:	e013      	b.n	8001970 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d105      	bne.n	800195c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001950:	2308      	movs	r3, #8
 8001952:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69fa      	ldr	r2, [r7, #28]
 8001958:	611a      	str	r2, [r3, #16]
          break;
 800195a:	e009      	b.n	8001970 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800195c:	2308      	movs	r3, #8
 800195e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	615a      	str	r2, [r3, #20]
          break;
 8001966:	e003      	b.n	8001970 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001968:	2300      	movs	r3, #0
 800196a:	623b      	str	r3, [r7, #32]
          break;
 800196c:	e000      	b.n	8001970 <HAL_GPIO_Init+0x130>
          break;
 800196e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	2bff      	cmp	r3, #255	; 0xff
 8001974:	d801      	bhi.n	800197a <HAL_GPIO_Init+0x13a>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	e001      	b.n	800197e <HAL_GPIO_Init+0x13e>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3304      	adds	r3, #4
 800197e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	2bff      	cmp	r3, #255	; 0xff
 8001984:	d802      	bhi.n	800198c <HAL_GPIO_Init+0x14c>
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	e002      	b.n	8001992 <HAL_GPIO_Init+0x152>
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	3b08      	subs	r3, #8
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	210f      	movs	r1, #15
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	fa01 f303 	lsl.w	r3, r1, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	401a      	ands	r2, r3
 80019a4:	6a39      	ldr	r1, [r7, #32]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ac:	431a      	orrs	r2, r3
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 80b1 	beq.w	8001b22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019c0:	4b4d      	ldr	r3, [pc, #308]	; (8001af8 <HAL_GPIO_Init+0x2b8>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	4a4c      	ldr	r2, [pc, #304]	; (8001af8 <HAL_GPIO_Init+0x2b8>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	6193      	str	r3, [r2, #24]
 80019cc:	4b4a      	ldr	r3, [pc, #296]	; (8001af8 <HAL_GPIO_Init+0x2b8>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019d8:	4a48      	ldr	r2, [pc, #288]	; (8001afc <HAL_GPIO_Init+0x2bc>)
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	089b      	lsrs	r3, r3, #2
 80019de:	3302      	adds	r3, #2
 80019e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	220f      	movs	r2, #15
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	4013      	ands	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a40      	ldr	r2, [pc, #256]	; (8001b00 <HAL_GPIO_Init+0x2c0>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d013      	beq.n	8001a2c <HAL_GPIO_Init+0x1ec>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a3f      	ldr	r2, [pc, #252]	; (8001b04 <HAL_GPIO_Init+0x2c4>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d00d      	beq.n	8001a28 <HAL_GPIO_Init+0x1e8>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a3e      	ldr	r2, [pc, #248]	; (8001b08 <HAL_GPIO_Init+0x2c8>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d007      	beq.n	8001a24 <HAL_GPIO_Init+0x1e4>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a3d      	ldr	r2, [pc, #244]	; (8001b0c <HAL_GPIO_Init+0x2cc>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d101      	bne.n	8001a20 <HAL_GPIO_Init+0x1e0>
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e006      	b.n	8001a2e <HAL_GPIO_Init+0x1ee>
 8001a20:	2304      	movs	r3, #4
 8001a22:	e004      	b.n	8001a2e <HAL_GPIO_Init+0x1ee>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e002      	b.n	8001a2e <HAL_GPIO_Init+0x1ee>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <HAL_GPIO_Init+0x1ee>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a30:	f002 0203 	and.w	r2, r2, #3
 8001a34:	0092      	lsls	r2, r2, #2
 8001a36:	4093      	lsls	r3, r2
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a3e:	492f      	ldr	r1, [pc, #188]	; (8001afc <HAL_GPIO_Init+0x2bc>)
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	089b      	lsrs	r3, r3, #2
 8001a44:	3302      	adds	r3, #2
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d006      	beq.n	8001a66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a58:	4b2d      	ldr	r3, [pc, #180]	; (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	492c      	ldr	r1, [pc, #176]	; (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	608b      	str	r3, [r1, #8]
 8001a64:	e006      	b.n	8001a74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a66:	4b2a      	ldr	r3, [pc, #168]	; (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	4928      	ldr	r1, [pc, #160]	; (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d006      	beq.n	8001a8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a80:	4b23      	ldr	r3, [pc, #140]	; (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	4922      	ldr	r1, [pc, #136]	; (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	60cb      	str	r3, [r1, #12]
 8001a8c:	e006      	b.n	8001a9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a8e:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	491e      	ldr	r1, [pc, #120]	; (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d006      	beq.n	8001ab6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001aa8:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	4918      	ldr	r1, [pc, #96]	; (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]
 8001ab4:	e006      	b.n	8001ac4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ab6:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	4914      	ldr	r1, [pc, #80]	; (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d021      	beq.n	8001b14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ad0:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	490e      	ldr	r1, [pc, #56]	; (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	600b      	str	r3, [r1, #0]
 8001adc:	e021      	b.n	8001b22 <HAL_GPIO_Init+0x2e2>
 8001ade:	bf00      	nop
 8001ae0:	10320000 	.word	0x10320000
 8001ae4:	10310000 	.word	0x10310000
 8001ae8:	10220000 	.word	0x10220000
 8001aec:	10210000 	.word	0x10210000
 8001af0:	10120000 	.word	0x10120000
 8001af4:	10110000 	.word	0x10110000
 8001af8:	40021000 	.word	0x40021000
 8001afc:	40010000 	.word	0x40010000
 8001b00:	40010800 	.word	0x40010800
 8001b04:	40010c00 	.word	0x40010c00
 8001b08:	40011000 	.word	0x40011000
 8001b0c:	40011400 	.word	0x40011400
 8001b10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <HAL_GPIO_Init+0x304>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	4909      	ldr	r1, [pc, #36]	; (8001b44 <HAL_GPIO_Init+0x304>)
 8001b1e:	4013      	ands	r3, r2
 8001b20:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	3301      	adds	r3, #1
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f47f ae8e 	bne.w	8001854 <HAL_GPIO_Init+0x14>
  }
}
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop
 8001b3c:	372c      	adds	r7, #44	; 0x2c
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr
 8001b44:	40010400 	.word	0x40010400

08001b48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	887b      	ldrh	r3, [r7, #2]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d002      	beq.n	8001b66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b60:	2301      	movs	r3, #1
 8001b62:	73fb      	strb	r3, [r7, #15]
 8001b64:	e001      	b.n	8001b6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b66:	2300      	movs	r3, #0
 8001b68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr

08001b76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	807b      	strh	r3, [r7, #2]
 8001b82:	4613      	mov	r3, r2
 8001b84:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b86:	787b      	ldrb	r3, [r7, #1]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b8c:	887a      	ldrh	r2, [r7, #2]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b92:	e003      	b.n	8001b9c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b94:	887b      	ldrh	r3, [r7, #2]
 8001b96:	041a      	lsls	r2, r3, #16
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	611a      	str	r2, [r3, #16]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr
	...

08001ba8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e272      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 8087 	beq.w	8001cd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bc8:	4b92      	ldr	r3, [pc, #584]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 030c 	and.w	r3, r3, #12
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d00c      	beq.n	8001bee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bd4:	4b8f      	ldr	r3, [pc, #572]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 030c 	and.w	r3, r3, #12
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d112      	bne.n	8001c06 <HAL_RCC_OscConfig+0x5e>
 8001be0:	4b8c      	ldr	r3, [pc, #560]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bec:	d10b      	bne.n	8001c06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bee:	4b89      	ldr	r3, [pc, #548]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d06c      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x12c>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d168      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e24c      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c0e:	d106      	bne.n	8001c1e <HAL_RCC_OscConfig+0x76>
 8001c10:	4b80      	ldr	r3, [pc, #512]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a7f      	ldr	r2, [pc, #508]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c1a:	6013      	str	r3, [r2, #0]
 8001c1c:	e02e      	b.n	8001c7c <HAL_RCC_OscConfig+0xd4>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10c      	bne.n	8001c40 <HAL_RCC_OscConfig+0x98>
 8001c26:	4b7b      	ldr	r3, [pc, #492]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a7a      	ldr	r2, [pc, #488]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	4b78      	ldr	r3, [pc, #480]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a77      	ldr	r2, [pc, #476]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	e01d      	b.n	8001c7c <HAL_RCC_OscConfig+0xd4>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c48:	d10c      	bne.n	8001c64 <HAL_RCC_OscConfig+0xbc>
 8001c4a:	4b72      	ldr	r3, [pc, #456]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a71      	ldr	r2, [pc, #452]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	4b6f      	ldr	r3, [pc, #444]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a6e      	ldr	r2, [pc, #440]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	e00b      	b.n	8001c7c <HAL_RCC_OscConfig+0xd4>
 8001c64:	4b6b      	ldr	r3, [pc, #428]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a6a      	ldr	r2, [pc, #424]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	4b68      	ldr	r3, [pc, #416]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a67      	ldr	r2, [pc, #412]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d013      	beq.n	8001cac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c84:	f7ff fcca 	bl	800161c <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c8c:	f7ff fcc6 	bl	800161c <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b64      	cmp	r3, #100	; 0x64
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e200      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9e:	4b5d      	ldr	r3, [pc, #372]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0xe4>
 8001caa:	e014      	b.n	8001cd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7ff fcb6 	bl	800161c <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb4:	f7ff fcb2 	bl	800161c <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b64      	cmp	r3, #100	; 0x64
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e1ec      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc6:	4b53      	ldr	r3, [pc, #332]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f0      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x10c>
 8001cd2:	e000      	b.n	8001cd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d063      	beq.n	8001daa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ce2:	4b4c      	ldr	r3, [pc, #304]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00b      	beq.n	8001d06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cee:	4b49      	ldr	r3, [pc, #292]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
 8001cf6:	2b08      	cmp	r3, #8
 8001cf8:	d11c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x18c>
 8001cfa:	4b46      	ldr	r3, [pc, #280]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d116      	bne.n	8001d34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d06:	4b43      	ldr	r3, [pc, #268]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d005      	beq.n	8001d1e <HAL_RCC_OscConfig+0x176>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d001      	beq.n	8001d1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e1c0      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1e:	4b3d      	ldr	r3, [pc, #244]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4939      	ldr	r1, [pc, #228]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d32:	e03a      	b.n	8001daa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d020      	beq.n	8001d7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d3c:	4b36      	ldr	r3, [pc, #216]	; (8001e18 <HAL_RCC_OscConfig+0x270>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d42:	f7ff fc6b 	bl	800161c <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d4a:	f7ff fc67 	bl	800161c <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e1a1      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5c:	4b2d      	ldr	r3, [pc, #180]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d68:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	4927      	ldr	r1, [pc, #156]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	600b      	str	r3, [r1, #0]
 8001d7c:	e015      	b.n	8001daa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d7e:	4b26      	ldr	r3, [pc, #152]	; (8001e18 <HAL_RCC_OscConfig+0x270>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d84:	f7ff fc4a 	bl	800161c <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d8c:	f7ff fc46 	bl	800161c <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e180      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9e:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f0      	bne.n	8001d8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d03a      	beq.n	8001e2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d019      	beq.n	8001df2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dbe:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <HAL_RCC_OscConfig+0x274>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc4:	f7ff fc2a 	bl	800161c <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dcc:	f7ff fc26 	bl	800161c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e160      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dde:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0f0      	beq.n	8001dcc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dea:	2001      	movs	r0, #1
 8001dec:	f000 fa9c 	bl	8002328 <RCC_Delay>
 8001df0:	e01c      	b.n	8001e2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001df2:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <HAL_RCC_OscConfig+0x274>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df8:	f7ff fc10 	bl	800161c <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dfe:	e00f      	b.n	8001e20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e00:	f7ff fc0c 	bl	800161c <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d908      	bls.n	8001e20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e146      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
 8001e12:	bf00      	nop
 8001e14:	40021000 	.word	0x40021000
 8001e18:	42420000 	.word	0x42420000
 8001e1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e20:	4b92      	ldr	r3, [pc, #584]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1e9      	bne.n	8001e00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 80a6 	beq.w	8001f86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e3e:	4b8b      	ldr	r3, [pc, #556]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10d      	bne.n	8001e66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e4a:	4b88      	ldr	r3, [pc, #544]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	4a87      	ldr	r2, [pc, #540]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e54:	61d3      	str	r3, [r2, #28]
 8001e56:	4b85      	ldr	r3, [pc, #532]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e62:	2301      	movs	r3, #1
 8001e64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e66:	4b82      	ldr	r3, [pc, #520]	; (8002070 <HAL_RCC_OscConfig+0x4c8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d118      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e72:	4b7f      	ldr	r3, [pc, #508]	; (8002070 <HAL_RCC_OscConfig+0x4c8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a7e      	ldr	r2, [pc, #504]	; (8002070 <HAL_RCC_OscConfig+0x4c8>)
 8001e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e7e:	f7ff fbcd 	bl	800161c <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e86:	f7ff fbc9 	bl	800161c <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b64      	cmp	r3, #100	; 0x64
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e103      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e98:	4b75      	ldr	r3, [pc, #468]	; (8002070 <HAL_RCC_OscConfig+0x4c8>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d106      	bne.n	8001eba <HAL_RCC_OscConfig+0x312>
 8001eac:	4b6f      	ldr	r3, [pc, #444]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	4a6e      	ldr	r2, [pc, #440]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	6213      	str	r3, [r2, #32]
 8001eb8:	e02d      	b.n	8001f16 <HAL_RCC_OscConfig+0x36e>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10c      	bne.n	8001edc <HAL_RCC_OscConfig+0x334>
 8001ec2:	4b6a      	ldr	r3, [pc, #424]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	4a69      	ldr	r2, [pc, #420]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	f023 0301 	bic.w	r3, r3, #1
 8001ecc:	6213      	str	r3, [r2, #32]
 8001ece:	4b67      	ldr	r3, [pc, #412]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	4a66      	ldr	r2, [pc, #408]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001ed4:	f023 0304 	bic.w	r3, r3, #4
 8001ed8:	6213      	str	r3, [r2, #32]
 8001eda:	e01c      	b.n	8001f16 <HAL_RCC_OscConfig+0x36e>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	2b05      	cmp	r3, #5
 8001ee2:	d10c      	bne.n	8001efe <HAL_RCC_OscConfig+0x356>
 8001ee4:	4b61      	ldr	r3, [pc, #388]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	4a60      	ldr	r2, [pc, #384]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	f043 0304 	orr.w	r3, r3, #4
 8001eee:	6213      	str	r3, [r2, #32]
 8001ef0:	4b5e      	ldr	r3, [pc, #376]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	4a5d      	ldr	r2, [pc, #372]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	6213      	str	r3, [r2, #32]
 8001efc:	e00b      	b.n	8001f16 <HAL_RCC_OscConfig+0x36e>
 8001efe:	4b5b      	ldr	r3, [pc, #364]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	4a5a      	ldr	r2, [pc, #360]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	f023 0301 	bic.w	r3, r3, #1
 8001f08:	6213      	str	r3, [r2, #32]
 8001f0a:	4b58      	ldr	r3, [pc, #352]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	4a57      	ldr	r2, [pc, #348]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	f023 0304 	bic.w	r3, r3, #4
 8001f14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d015      	beq.n	8001f4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1e:	f7ff fb7d 	bl	800161c <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f24:	e00a      	b.n	8001f3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f26:	f7ff fb79 	bl	800161c <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e0b1      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3c:	4b4b      	ldr	r3, [pc, #300]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0ee      	beq.n	8001f26 <HAL_RCC_OscConfig+0x37e>
 8001f48:	e014      	b.n	8001f74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4a:	f7ff fb67 	bl	800161c <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f50:	e00a      	b.n	8001f68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f52:	f7ff fb63 	bl	800161c <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e09b      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f68:	4b40      	ldr	r3, [pc, #256]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1ee      	bne.n	8001f52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f74:	7dfb      	ldrb	r3, [r7, #23]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d105      	bne.n	8001f86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f7a:	4b3c      	ldr	r3, [pc, #240]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	4a3b      	ldr	r2, [pc, #236]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 8087 	beq.w	800209e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f90:	4b36      	ldr	r3, [pc, #216]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 030c 	and.w	r3, r3, #12
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d061      	beq.n	8002060 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d146      	bne.n	8002032 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa4:	4b33      	ldr	r3, [pc, #204]	; (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001faa:	f7ff fb37 	bl	800161c <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb2:	f7ff fb33 	bl	800161c <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e06d      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc4:	4b29      	ldr	r3, [pc, #164]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1f0      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd8:	d108      	bne.n	8001fec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fda:	4b24      	ldr	r3, [pc, #144]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	4921      	ldr	r1, [pc, #132]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fec:	4b1f      	ldr	r3, [pc, #124]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a19      	ldr	r1, [r3, #32]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	430b      	orrs	r3, r1
 8001ffe:	491b      	ldr	r1, [pc, #108]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8002000:	4313      	orrs	r3, r2
 8002002:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002004:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8002006:	2201      	movs	r2, #1
 8002008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200a:	f7ff fb07 	bl	800161c <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002012:	f7ff fb03 	bl	800161c <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e03d      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002024:	4b11      	ldr	r3, [pc, #68]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0x46a>
 8002030:	e035      	b.n	800209e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002032:	4b10      	ldr	r3, [pc, #64]	; (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002038:	f7ff faf0 	bl	800161c <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002040:	f7ff faec 	bl	800161c <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e026      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002052:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x498>
 800205e:	e01e      	b.n	800209e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d107      	bne.n	8002078 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e019      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
 800206c:	40021000 	.word	0x40021000
 8002070:	40007000 	.word	0x40007000
 8002074:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_RCC_OscConfig+0x500>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	429a      	cmp	r2, r3
 800208a:	d106      	bne.n	800209a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002096:	429a      	cmp	r2, r3
 8002098:	d001      	beq.n	800209e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40021000 	.word	0x40021000

080020ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0d0      	b.n	8002262 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020c0:	4b6a      	ldr	r3, [pc, #424]	; (800226c <HAL_RCC_ClockConfig+0x1c0>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d910      	bls.n	80020f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ce:	4b67      	ldr	r3, [pc, #412]	; (800226c <HAL_RCC_ClockConfig+0x1c0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 0207 	bic.w	r2, r3, #7
 80020d6:	4965      	ldr	r1, [pc, #404]	; (800226c <HAL_RCC_ClockConfig+0x1c0>)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	4313      	orrs	r3, r2
 80020dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020de:	4b63      	ldr	r3, [pc, #396]	; (800226c <HAL_RCC_ClockConfig+0x1c0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d001      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0b8      	b.n	8002262 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d020      	beq.n	800213e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002108:	4b59      	ldr	r3, [pc, #356]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	4a58      	ldr	r2, [pc, #352]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800210e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002112:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	2b00      	cmp	r3, #0
 800211e:	d005      	beq.n	800212c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002120:	4b53      	ldr	r3, [pc, #332]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	4a52      	ldr	r2, [pc, #328]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800212a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800212c:	4b50      	ldr	r3, [pc, #320]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	494d      	ldr	r1, [pc, #308]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	4313      	orrs	r3, r2
 800213c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d040      	beq.n	80021cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d107      	bne.n	8002162 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002152:	4b47      	ldr	r3, [pc, #284]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d115      	bne.n	800218a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e07f      	b.n	8002262 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d107      	bne.n	800217a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216a:	4b41      	ldr	r3, [pc, #260]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d109      	bne.n	800218a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e073      	b.n	8002262 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217a:	4b3d      	ldr	r3, [pc, #244]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e06b      	b.n	8002262 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800218a:	4b39      	ldr	r3, [pc, #228]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f023 0203 	bic.w	r2, r3, #3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	4936      	ldr	r1, [pc, #216]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 8002198:	4313      	orrs	r3, r2
 800219a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800219c:	f7ff fa3e 	bl	800161c <HAL_GetTick>
 80021a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a2:	e00a      	b.n	80021ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a4:	f7ff fa3a 	bl	800161c <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e053      	b.n	8002262 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ba:	4b2d      	ldr	r3, [pc, #180]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f003 020c 	and.w	r2, r3, #12
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d1eb      	bne.n	80021a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021cc:	4b27      	ldr	r3, [pc, #156]	; (800226c <HAL_RCC_ClockConfig+0x1c0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d210      	bcs.n	80021fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021da:	4b24      	ldr	r3, [pc, #144]	; (800226c <HAL_RCC_ClockConfig+0x1c0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f023 0207 	bic.w	r2, r3, #7
 80021e2:	4922      	ldr	r1, [pc, #136]	; (800226c <HAL_RCC_ClockConfig+0x1c0>)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ea:	4b20      	ldr	r3, [pc, #128]	; (800226c <HAL_RCC_ClockConfig+0x1c0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d001      	beq.n	80021fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e032      	b.n	8002262 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d008      	beq.n	800221a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002208:	4b19      	ldr	r3, [pc, #100]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	4916      	ldr	r1, [pc, #88]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	4313      	orrs	r3, r2
 8002218:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d009      	beq.n	800223a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002226:	4b12      	ldr	r3, [pc, #72]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	490e      	ldr	r1, [pc, #56]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 8002236:	4313      	orrs	r3, r2
 8002238:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800223a:	f000 f821 	bl	8002280 <HAL_RCC_GetSysClockFreq>
 800223e:	4602      	mov	r2, r0
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	091b      	lsrs	r3, r3, #4
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	490a      	ldr	r1, [pc, #40]	; (8002274 <HAL_RCC_ClockConfig+0x1c8>)
 800224c:	5ccb      	ldrb	r3, [r1, r3]
 800224e:	fa22 f303 	lsr.w	r3, r2, r3
 8002252:	4a09      	ldr	r2, [pc, #36]	; (8002278 <HAL_RCC_ClockConfig+0x1cc>)
 8002254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002256:	4b09      	ldr	r3, [pc, #36]	; (800227c <HAL_RCC_ClockConfig+0x1d0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff f99c 	bl	8001598 <HAL_InitTick>

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40022000 	.word	0x40022000
 8002270:	40021000 	.word	0x40021000
 8002274:	08003b0c 	.word	0x08003b0c
 8002278:	20000008 	.word	0x20000008
 800227c:	2000001c 	.word	0x2000001c

08002280 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002280:	b480      	push	{r7}
 8002282:	b087      	sub	sp, #28
 8002284:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	2300      	movs	r3, #0
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	2300      	movs	r3, #0
 8002294:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800229a:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <HAL_RCC_GetSysClockFreq+0x94>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d002      	beq.n	80022b0 <HAL_RCC_GetSysClockFreq+0x30>
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	d003      	beq.n	80022b6 <HAL_RCC_GetSysClockFreq+0x36>
 80022ae:	e027      	b.n	8002300 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022b0:	4b19      	ldr	r3, [pc, #100]	; (8002318 <HAL_RCC_GetSysClockFreq+0x98>)
 80022b2:	613b      	str	r3, [r7, #16]
      break;
 80022b4:	e027      	b.n	8002306 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	0c9b      	lsrs	r3, r3, #18
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	4a17      	ldr	r2, [pc, #92]	; (800231c <HAL_RCC_GetSysClockFreq+0x9c>)
 80022c0:	5cd3      	ldrb	r3, [r2, r3]
 80022c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d010      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022ce:	4b11      	ldr	r3, [pc, #68]	; (8002314 <HAL_RCC_GetSysClockFreq+0x94>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	0c5b      	lsrs	r3, r3, #17
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	4a11      	ldr	r2, [pc, #68]	; (8002320 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022da:	5cd3      	ldrb	r3, [r2, r3]
 80022dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a0d      	ldr	r2, [pc, #52]	; (8002318 <HAL_RCC_GetSysClockFreq+0x98>)
 80022e2:	fb03 f202 	mul.w	r2, r3, r2
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	e004      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a0c      	ldr	r2, [pc, #48]	; (8002324 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022f4:	fb02 f303 	mul.w	r3, r2, r3
 80022f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	613b      	str	r3, [r7, #16]
      break;
 80022fe:	e002      	b.n	8002306 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002300:	4b05      	ldr	r3, [pc, #20]	; (8002318 <HAL_RCC_GetSysClockFreq+0x98>)
 8002302:	613b      	str	r3, [r7, #16]
      break;
 8002304:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002306:	693b      	ldr	r3, [r7, #16]
}
 8002308:	4618      	mov	r0, r3
 800230a:	371c      	adds	r7, #28
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40021000 	.word	0x40021000
 8002318:	007a1200 	.word	0x007a1200
 800231c:	08004fe4 	.word	0x08004fe4
 8002320:	08004ff4 	.word	0x08004ff4
 8002324:	003d0900 	.word	0x003d0900

08002328 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002330:	4b0a      	ldr	r3, [pc, #40]	; (800235c <RCC_Delay+0x34>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <RCC_Delay+0x38>)
 8002336:	fba2 2303 	umull	r2, r3, r2, r3
 800233a:	0a5b      	lsrs	r3, r3, #9
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	fb02 f303 	mul.w	r3, r2, r3
 8002342:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002344:	bf00      	nop
  }
  while (Delay --);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1e5a      	subs	r2, r3, #1
 800234a:	60fa      	str	r2, [r7, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1f9      	bne.n	8002344 <RCC_Delay+0x1c>
}
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr
 800235c:	20000008 	.word	0x20000008
 8002360:	10624dd3 	.word	0x10624dd3

08002364 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e076      	b.n	8002464 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	2b00      	cmp	r3, #0
 800237c:	d108      	bne.n	8002390 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002386:	d009      	beq.n	800239c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	61da      	str	r2, [r3, #28]
 800238e:	e005      	b.n	800239c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d106      	bne.n	80023bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7fe fbd2 	bl	8000b60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2202      	movs	r2, #2
 80023c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80023e4:	431a      	orrs	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002420:	ea42 0103 	orr.w	r1, r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002428:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	0c1a      	lsrs	r2, r3, #16
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f002 0204 	and.w	r2, r2, #4
 8002442:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	69da      	ldr	r2, [r3, #28]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002452:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b088      	sub	sp, #32
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	603b      	str	r3, [r7, #0]
 8002478:	4613      	mov	r3, r2
 800247a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800247c:	2300      	movs	r3, #0
 800247e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_SPI_Transmit+0x22>
 800248a:	2302      	movs	r3, #2
 800248c:	e12d      	b.n	80026ea <HAL_SPI_Transmit+0x27e>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002496:	f7ff f8c1 	bl	800161c <HAL_GetTick>
 800249a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800249c:	88fb      	ldrh	r3, [r7, #6]
 800249e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d002      	beq.n	80024b2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80024ac:	2302      	movs	r3, #2
 80024ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024b0:	e116      	b.n	80026e0 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <HAL_SPI_Transmit+0x52>
 80024b8:	88fb      	ldrh	r3, [r7, #6]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d102      	bne.n	80024c4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024c2:	e10d      	b.n	80026e0 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2203      	movs	r2, #3
 80024c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	68ba      	ldr	r2, [r7, #8]
 80024d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	88fa      	ldrh	r2, [r7, #6]
 80024dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	88fa      	ldrh	r2, [r7, #6]
 80024e2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800250a:	d10f      	bne.n	800252c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800251a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800252a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002536:	2b40      	cmp	r3, #64	; 0x40
 8002538:	d007      	beq.n	800254a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002548:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002552:	d14f      	bne.n	80025f4 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d002      	beq.n	8002562 <HAL_SPI_Transmit+0xf6>
 800255c:	8afb      	ldrh	r3, [r7, #22]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d142      	bne.n	80025e8 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	881a      	ldrh	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	1c9a      	adds	r2, r3, #2
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800257c:	b29b      	uxth	r3, r3
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002586:	e02f      	b.n	80025e8 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b02      	cmp	r3, #2
 8002594:	d112      	bne.n	80025bc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	881a      	ldrh	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	1c9a      	adds	r2, r3, #2
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	3b01      	subs	r3, #1
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80025ba:	e015      	b.n	80025e8 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025bc:	f7ff f82e 	bl	800161c <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d803      	bhi.n	80025d4 <HAL_SPI_Transmit+0x168>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d2:	d102      	bne.n	80025da <HAL_SPI_Transmit+0x16e>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d106      	bne.n	80025e8 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80025e6:	e07b      	b.n	80026e0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1ca      	bne.n	8002588 <HAL_SPI_Transmit+0x11c>
 80025f2:	e050      	b.n	8002696 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <HAL_SPI_Transmit+0x196>
 80025fc:	8afb      	ldrh	r3, [r7, #22]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d144      	bne.n	800268c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	330c      	adds	r3, #12
 800260c:	7812      	ldrb	r2, [r2, #0]
 800260e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	1c5a      	adds	r2, r3, #1
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800261e:	b29b      	uxth	r3, r3
 8002620:	3b01      	subs	r3, #1
 8002622:	b29a      	uxth	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002628:	e030      	b.n	800268c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b02      	cmp	r3, #2
 8002636:	d113      	bne.n	8002660 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	330c      	adds	r3, #12
 8002642:	7812      	ldrb	r2, [r2, #0]
 8002644:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002654:	b29b      	uxth	r3, r3
 8002656:	3b01      	subs	r3, #1
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	86da      	strh	r2, [r3, #54]	; 0x36
 800265e:	e015      	b.n	800268c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002660:	f7fe ffdc 	bl	800161c <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d803      	bhi.n	8002678 <HAL_SPI_Transmit+0x20c>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002676:	d102      	bne.n	800267e <HAL_SPI_Transmit+0x212>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d106      	bne.n	800268c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800268a:	e029      	b.n	80026e0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002690:	b29b      	uxth	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1c9      	bne.n	800262a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	6839      	ldr	r1, [r7, #0]
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f8b2 	bl	8002804 <SPI_EndRxTxTransaction>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2220      	movs	r2, #32
 80026aa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10a      	bne.n	80026ca <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026b4:	2300      	movs	r3, #0
 80026b6:	613b      	str	r3, [r7, #16]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	613b      	str	r3, [r7, #16]
 80026c8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	77fb      	strb	r3, [r7, #31]
 80026d6:	e003      	b.n	80026e0 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80026e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3720      	adds	r7, #32
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	603b      	str	r3, [r7, #0]
 8002700:	4613      	mov	r3, r2
 8002702:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002704:	f7fe ff8a 	bl	800161c <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270c:	1a9b      	subs	r3, r3, r2
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	4413      	add	r3, r2
 8002712:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002714:	f7fe ff82 	bl	800161c <HAL_GetTick>
 8002718:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800271a:	4b39      	ldr	r3, [pc, #228]	; (8002800 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	015b      	lsls	r3, r3, #5
 8002720:	0d1b      	lsrs	r3, r3, #20
 8002722:	69fa      	ldr	r2, [r7, #28]
 8002724:	fb02 f303 	mul.w	r3, r2, r3
 8002728:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800272a:	e054      	b.n	80027d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002732:	d050      	beq.n	80027d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002734:	f7fe ff72 	bl	800161c <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	69fa      	ldr	r2, [r7, #28]
 8002740:	429a      	cmp	r2, r3
 8002742:	d902      	bls.n	800274a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d13d      	bne.n	80027c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002758:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002762:	d111      	bne.n	8002788 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800276c:	d004      	beq.n	8002778 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002776:	d107      	bne.n	8002788 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002786:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002790:	d10f      	bne.n	80027b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e017      	b.n	80027f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	4013      	ands	r3, r2
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	bf0c      	ite	eq
 80027e6:	2301      	moveq	r3, #1
 80027e8:	2300      	movne	r3, #0
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	461a      	mov	r2, r3
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d19b      	bne.n	800272c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3720      	adds	r7, #32
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000008 	.word	0x20000008

08002804 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af02      	add	r7, sp, #8
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2200      	movs	r2, #0
 8002818:	2180      	movs	r1, #128	; 0x80
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f7ff ff6a 	bl	80026f4 <SPI_WaitFlagStateUntilTimeout>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d007      	beq.n	8002836 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282a:	f043 0220 	orr.w	r2, r3, #32
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e000      	b.n	8002838 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e041      	b.n	80028d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d106      	bne.n	800286c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7fe f9b8 	bl	8000bdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2202      	movs	r2, #2
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3304      	adds	r3, #4
 800287c:	4619      	mov	r1, r3
 800287e:	4610      	mov	r0, r2
 8002880:	f000 f9f6 	bl	8002c70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d109      	bne.n	8002904 <HAL_TIM_PWM_Start+0x24>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	bf14      	ite	ne
 80028fc:	2301      	movne	r3, #1
 80028fe:	2300      	moveq	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	e022      	b.n	800294a <HAL_TIM_PWM_Start+0x6a>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	2b04      	cmp	r3, #4
 8002908:	d109      	bne.n	800291e <HAL_TIM_PWM_Start+0x3e>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b01      	cmp	r3, #1
 8002914:	bf14      	ite	ne
 8002916:	2301      	movne	r3, #1
 8002918:	2300      	moveq	r3, #0
 800291a:	b2db      	uxtb	r3, r3
 800291c:	e015      	b.n	800294a <HAL_TIM_PWM_Start+0x6a>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b08      	cmp	r3, #8
 8002922:	d109      	bne.n	8002938 <HAL_TIM_PWM_Start+0x58>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b01      	cmp	r3, #1
 800292e:	bf14      	ite	ne
 8002930:	2301      	movne	r3, #1
 8002932:	2300      	moveq	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	e008      	b.n	800294a <HAL_TIM_PWM_Start+0x6a>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b01      	cmp	r3, #1
 8002942:	bf14      	ite	ne
 8002944:	2301      	movne	r3, #1
 8002946:	2300      	moveq	r3, #0
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e05e      	b.n	8002a10 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d104      	bne.n	8002962 <HAL_TIM_PWM_Start+0x82>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002960:	e013      	b.n	800298a <HAL_TIM_PWM_Start+0xaa>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2b04      	cmp	r3, #4
 8002966:	d104      	bne.n	8002972 <HAL_TIM_PWM_Start+0x92>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2202      	movs	r2, #2
 800296c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002970:	e00b      	b.n	800298a <HAL_TIM_PWM_Start+0xaa>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2b08      	cmp	r3, #8
 8002976:	d104      	bne.n	8002982 <HAL_TIM_PWM_Start+0xa2>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2202      	movs	r2, #2
 800297c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002980:	e003      	b.n	800298a <HAL_TIM_PWM_Start+0xaa>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2202      	movs	r2, #2
 8002986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2201      	movs	r2, #1
 8002990:	6839      	ldr	r1, [r7, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f000 fb56 	bl	8003044 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a1e      	ldr	r2, [pc, #120]	; (8002a18 <HAL_TIM_PWM_Start+0x138>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d107      	bne.n	80029b2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a18      	ldr	r2, [pc, #96]	; (8002a18 <HAL_TIM_PWM_Start+0x138>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d00e      	beq.n	80029da <HAL_TIM_PWM_Start+0xfa>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c4:	d009      	beq.n	80029da <HAL_TIM_PWM_Start+0xfa>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a14      	ldr	r2, [pc, #80]	; (8002a1c <HAL_TIM_PWM_Start+0x13c>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d004      	beq.n	80029da <HAL_TIM_PWM_Start+0xfa>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a12      	ldr	r2, [pc, #72]	; (8002a20 <HAL_TIM_PWM_Start+0x140>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d111      	bne.n	80029fe <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2b06      	cmp	r3, #6
 80029ea:	d010      	beq.n	8002a0e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029fc:	e007      	b.n	8002a0e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0201 	orr.w	r2, r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40012c00 	.word	0x40012c00
 8002a1c:	40000400 	.word	0x40000400
 8002a20:	40000800 	.word	0x40000800

08002a24 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2200      	movs	r2, #0
 8002a34:	6839      	ldr	r1, [r7, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 fb04 	bl	8003044 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a29      	ldr	r2, [pc, #164]	; (8002ae8 <HAL_TIM_PWM_Stop+0xc4>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d117      	bne.n	8002a76 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6a1a      	ldr	r2, [r3, #32]
 8002a4c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10f      	bne.n	8002a76 <HAL_TIM_PWM_Stop+0x52>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6a1a      	ldr	r2, [r3, #32]
 8002a5c:	f240 4344 	movw	r3, #1092	; 0x444
 8002a60:	4013      	ands	r3, r2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d107      	bne.n	8002a76 <HAL_TIM_PWM_Stop+0x52>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6a1a      	ldr	r2, [r3, #32]
 8002a7c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002a80:	4013      	ands	r3, r2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10f      	bne.n	8002aa6 <HAL_TIM_PWM_Stop+0x82>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6a1a      	ldr	r2, [r3, #32]
 8002a8c:	f240 4344 	movw	r3, #1092	; 0x444
 8002a90:	4013      	ands	r3, r2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d107      	bne.n	8002aa6 <HAL_TIM_PWM_Stop+0x82>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0201 	bic.w	r2, r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d104      	bne.n	8002ab6 <HAL_TIM_PWM_Stop+0x92>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ab4:	e013      	b.n	8002ade <HAL_TIM_PWM_Stop+0xba>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d104      	bne.n	8002ac6 <HAL_TIM_PWM_Stop+0xa2>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ac4:	e00b      	b.n	8002ade <HAL_TIM_PWM_Stop+0xba>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d104      	bne.n	8002ad6 <HAL_TIM_PWM_Stop+0xb2>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ad4:	e003      	b.n	8002ade <HAL_TIM_PWM_Stop+0xba>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40012c00 	.word	0x40012c00

08002aec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d101      	bne.n	8002b0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b06:	2302      	movs	r3, #2
 8002b08:	e0ae      	b.n	8002c68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b0c      	cmp	r3, #12
 8002b16:	f200 809f 	bhi.w	8002c58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b1a:	a201      	add	r2, pc, #4	; (adr r2, 8002b20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b20:	08002b55 	.word	0x08002b55
 8002b24:	08002c59 	.word	0x08002c59
 8002b28:	08002c59 	.word	0x08002c59
 8002b2c:	08002c59 	.word	0x08002c59
 8002b30:	08002b95 	.word	0x08002b95
 8002b34:	08002c59 	.word	0x08002c59
 8002b38:	08002c59 	.word	0x08002c59
 8002b3c:	08002c59 	.word	0x08002c59
 8002b40:	08002bd7 	.word	0x08002bd7
 8002b44:	08002c59 	.word	0x08002c59
 8002b48:	08002c59 	.word	0x08002c59
 8002b4c:	08002c59 	.word	0x08002c59
 8002b50:	08002c17 	.word	0x08002c17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 f8ea 	bl	8002d34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699a      	ldr	r2, [r3, #24]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0208 	orr.w	r2, r2, #8
 8002b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699a      	ldr	r2, [r3, #24]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0204 	bic.w	r2, r2, #4
 8002b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6999      	ldr	r1, [r3, #24]
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	619a      	str	r2, [r3, #24]
      break;
 8002b92:	e064      	b.n	8002c5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68b9      	ldr	r1, [r7, #8]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 f930 	bl	8002e00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699a      	ldr	r2, [r3, #24]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699a      	ldr	r2, [r3, #24]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6999      	ldr	r1, [r3, #24]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	021a      	lsls	r2, r3, #8
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	619a      	str	r2, [r3, #24]
      break;
 8002bd4:	e043      	b.n	8002c5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68b9      	ldr	r1, [r7, #8]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 f979 	bl	8002ed4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	69da      	ldr	r2, [r3, #28]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f042 0208 	orr.w	r2, r2, #8
 8002bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69da      	ldr	r2, [r3, #28]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0204 	bic.w	r2, r2, #4
 8002c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	69d9      	ldr	r1, [r3, #28]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	61da      	str	r2, [r3, #28]
      break;
 8002c14:	e023      	b.n	8002c5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68b9      	ldr	r1, [r7, #8]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 f9c3 	bl	8002fa8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	69da      	ldr	r2, [r3, #28]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	69da      	ldr	r2, [r3, #28]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	69d9      	ldr	r1, [r3, #28]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	021a      	lsls	r2, r3, #8
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	61da      	str	r2, [r3, #28]
      break;
 8002c56:	e002      	b.n	8002c5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a29      	ldr	r2, [pc, #164]	; (8002d28 <TIM_Base_SetConfig+0xb8>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d00b      	beq.n	8002ca0 <TIM_Base_SetConfig+0x30>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c8e:	d007      	beq.n	8002ca0 <TIM_Base_SetConfig+0x30>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a26      	ldr	r2, [pc, #152]	; (8002d2c <TIM_Base_SetConfig+0xbc>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d003      	beq.n	8002ca0 <TIM_Base_SetConfig+0x30>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a25      	ldr	r2, [pc, #148]	; (8002d30 <TIM_Base_SetConfig+0xc0>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d108      	bne.n	8002cb2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a1c      	ldr	r2, [pc, #112]	; (8002d28 <TIM_Base_SetConfig+0xb8>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d00b      	beq.n	8002cd2 <TIM_Base_SetConfig+0x62>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc0:	d007      	beq.n	8002cd2 <TIM_Base_SetConfig+0x62>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a19      	ldr	r2, [pc, #100]	; (8002d2c <TIM_Base_SetConfig+0xbc>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d003      	beq.n	8002cd2 <TIM_Base_SetConfig+0x62>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a18      	ldr	r2, [pc, #96]	; (8002d30 <TIM_Base_SetConfig+0xc0>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d108      	bne.n	8002ce4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a07      	ldr	r2, [pc, #28]	; (8002d28 <TIM_Base_SetConfig+0xb8>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d103      	bne.n	8002d18 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	691a      	ldr	r2, [r3, #16]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	615a      	str	r2, [r3, #20]
}
 8002d1e:	bf00      	nop
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr
 8002d28:	40012c00 	.word	0x40012c00
 8002d2c:	40000400 	.word	0x40000400
 8002d30:	40000800 	.word	0x40000800

08002d34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b087      	sub	sp, #28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	f023 0201 	bic.w	r2, r3, #1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f023 0303 	bic.w	r3, r3, #3
 8002d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f023 0302 	bic.w	r3, r3, #2
 8002d7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a1c      	ldr	r2, [pc, #112]	; (8002dfc <TIM_OC1_SetConfig+0xc8>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d10c      	bne.n	8002daa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f023 0308 	bic.w	r3, r3, #8
 8002d96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f023 0304 	bic.w	r3, r3, #4
 8002da8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a13      	ldr	r2, [pc, #76]	; (8002dfc <TIM_OC1_SetConfig+0xc8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d111      	bne.n	8002dd6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	621a      	str	r2, [r3, #32]
}
 8002df0:	bf00      	nop
 8002df2:	371c      	adds	r7, #28
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40012c00 	.word	0x40012c00

08002e00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	f023 0210 	bic.w	r2, r3, #16
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	021b      	lsls	r3, r3, #8
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	f023 0320 	bic.w	r3, r3, #32
 8002e4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a1d      	ldr	r2, [pc, #116]	; (8002ed0 <TIM_OC2_SetConfig+0xd0>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d10d      	bne.n	8002e7c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a14      	ldr	r2, [pc, #80]	; (8002ed0 <TIM_OC2_SetConfig+0xd0>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d113      	bne.n	8002eac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	621a      	str	r2, [r3, #32]
}
 8002ec6:	bf00      	nop
 8002ec8:	371c      	adds	r7, #28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr
 8002ed0:	40012c00 	.word	0x40012c00

08002ed4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b087      	sub	sp, #28
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f023 0303 	bic.w	r3, r3, #3
 8002f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	021b      	lsls	r3, r3, #8
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a1d      	ldr	r2, [pc, #116]	; (8002fa4 <TIM_OC3_SetConfig+0xd0>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d10d      	bne.n	8002f4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	021b      	lsls	r3, r3, #8
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a14      	ldr	r2, [pc, #80]	; (8002fa4 <TIM_OC3_SetConfig+0xd0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d113      	bne.n	8002f7e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	621a      	str	r2, [r3, #32]
}
 8002f98:	bf00      	nop
 8002f9a:	371c      	adds	r7, #28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40012c00 	.word	0x40012c00

08002fa8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b087      	sub	sp, #28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	021b      	lsls	r3, r3, #8
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ff2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	031b      	lsls	r3, r3, #12
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a0f      	ldr	r2, [pc, #60]	; (8003040 <TIM_OC4_SetConfig+0x98>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d109      	bne.n	800301c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800300e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	019b      	lsls	r3, r3, #6
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	4313      	orrs	r3, r2
 800301a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	621a      	str	r2, [r3, #32]
}
 8003036:	bf00      	nop
 8003038:	371c      	adds	r7, #28
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr
 8003040:	40012c00 	.word	0x40012c00

08003044 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f003 031f 	and.w	r3, r3, #31
 8003056:	2201      	movs	r2, #1
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a1a      	ldr	r2, [r3, #32]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	43db      	mvns	r3, r3
 8003066:	401a      	ands	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a1a      	ldr	r2, [r3, #32]
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f003 031f 	and.w	r3, r3, #31
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	fa01 f303 	lsl.w	r3, r1, r3
 800307c:	431a      	orrs	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	621a      	str	r2, [r3, #32]
}
 8003082:	bf00      	nop
 8003084:	371c      	adds	r7, #28
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr

0800308c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e046      	b.n	8003132 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a16      	ldr	r2, [pc, #88]	; (800313c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d00e      	beq.n	8003106 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f0:	d009      	beq.n	8003106 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a12      	ldr	r2, [pc, #72]	; (8003140 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d004      	beq.n	8003106 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a10      	ldr	r2, [pc, #64]	; (8003144 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d10c      	bne.n	8003120 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800310c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	4313      	orrs	r3, r2
 8003116:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr
 800313c:	40012c00 	.word	0x40012c00
 8003140:	40000400 	.word	0x40000400
 8003144:	40000800 	.word	0x40000800

08003148 <__errno>:
 8003148:	4b01      	ldr	r3, [pc, #4]	; (8003150 <__errno+0x8>)
 800314a:	6818      	ldr	r0, [r3, #0]
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	20000024 	.word	0x20000024

08003154 <__libc_init_array>:
 8003154:	b570      	push	{r4, r5, r6, lr}
 8003156:	2600      	movs	r6, #0
 8003158:	4d0c      	ldr	r5, [pc, #48]	; (800318c <__libc_init_array+0x38>)
 800315a:	4c0d      	ldr	r4, [pc, #52]	; (8003190 <__libc_init_array+0x3c>)
 800315c:	1b64      	subs	r4, r4, r5
 800315e:	10a4      	asrs	r4, r4, #2
 8003160:	42a6      	cmp	r6, r4
 8003162:	d109      	bne.n	8003178 <__libc_init_array+0x24>
 8003164:	f000 fcb0 	bl	8003ac8 <_init>
 8003168:	2600      	movs	r6, #0
 800316a:	4d0a      	ldr	r5, [pc, #40]	; (8003194 <__libc_init_array+0x40>)
 800316c:	4c0a      	ldr	r4, [pc, #40]	; (8003198 <__libc_init_array+0x44>)
 800316e:	1b64      	subs	r4, r4, r5
 8003170:	10a4      	asrs	r4, r4, #2
 8003172:	42a6      	cmp	r6, r4
 8003174:	d105      	bne.n	8003182 <__libc_init_array+0x2e>
 8003176:	bd70      	pop	{r4, r5, r6, pc}
 8003178:	f855 3b04 	ldr.w	r3, [r5], #4
 800317c:	4798      	blx	r3
 800317e:	3601      	adds	r6, #1
 8003180:	e7ee      	b.n	8003160 <__libc_init_array+0xc>
 8003182:	f855 3b04 	ldr.w	r3, [r5], #4
 8003186:	4798      	blx	r3
 8003188:	3601      	adds	r6, #1
 800318a:	e7f2      	b.n	8003172 <__libc_init_array+0x1e>
 800318c:	0800502c 	.word	0x0800502c
 8003190:	0800502c 	.word	0x0800502c
 8003194:	0800502c 	.word	0x0800502c
 8003198:	08005030 	.word	0x08005030

0800319c <memcpy>:
 800319c:	440a      	add	r2, r1
 800319e:	4291      	cmp	r1, r2
 80031a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80031a4:	d100      	bne.n	80031a8 <memcpy+0xc>
 80031a6:	4770      	bx	lr
 80031a8:	b510      	push	{r4, lr}
 80031aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031ae:	4291      	cmp	r1, r2
 80031b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031b4:	d1f9      	bne.n	80031aa <memcpy+0xe>
 80031b6:	bd10      	pop	{r4, pc}

080031b8 <memmove>:
 80031b8:	4288      	cmp	r0, r1
 80031ba:	b510      	push	{r4, lr}
 80031bc:	eb01 0402 	add.w	r4, r1, r2
 80031c0:	d902      	bls.n	80031c8 <memmove+0x10>
 80031c2:	4284      	cmp	r4, r0
 80031c4:	4623      	mov	r3, r4
 80031c6:	d807      	bhi.n	80031d8 <memmove+0x20>
 80031c8:	1e43      	subs	r3, r0, #1
 80031ca:	42a1      	cmp	r1, r4
 80031cc:	d008      	beq.n	80031e0 <memmove+0x28>
 80031ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80031d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80031d6:	e7f8      	b.n	80031ca <memmove+0x12>
 80031d8:	4601      	mov	r1, r0
 80031da:	4402      	add	r2, r0
 80031dc:	428a      	cmp	r2, r1
 80031de:	d100      	bne.n	80031e2 <memmove+0x2a>
 80031e0:	bd10      	pop	{r4, pc}
 80031e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80031e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80031ea:	e7f7      	b.n	80031dc <memmove+0x24>

080031ec <memset>:
 80031ec:	4603      	mov	r3, r0
 80031ee:	4402      	add	r2, r0
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d100      	bne.n	80031f6 <memset+0xa>
 80031f4:	4770      	bx	lr
 80031f6:	f803 1b01 	strb.w	r1, [r3], #1
 80031fa:	e7f9      	b.n	80031f0 <memset+0x4>

080031fc <sniprintf>:
 80031fc:	b40c      	push	{r2, r3}
 80031fe:	b530      	push	{r4, r5, lr}
 8003200:	4b17      	ldr	r3, [pc, #92]	; (8003260 <sniprintf+0x64>)
 8003202:	1e0c      	subs	r4, r1, #0
 8003204:	681d      	ldr	r5, [r3, #0]
 8003206:	b09d      	sub	sp, #116	; 0x74
 8003208:	da08      	bge.n	800321c <sniprintf+0x20>
 800320a:	238b      	movs	r3, #139	; 0x8b
 800320c:	f04f 30ff 	mov.w	r0, #4294967295
 8003210:	602b      	str	r3, [r5, #0]
 8003212:	b01d      	add	sp, #116	; 0x74
 8003214:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003218:	b002      	add	sp, #8
 800321a:	4770      	bx	lr
 800321c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003220:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003224:	bf0c      	ite	eq
 8003226:	4623      	moveq	r3, r4
 8003228:	f104 33ff 	addne.w	r3, r4, #4294967295
 800322c:	9304      	str	r3, [sp, #16]
 800322e:	9307      	str	r3, [sp, #28]
 8003230:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003234:	9002      	str	r0, [sp, #8]
 8003236:	9006      	str	r0, [sp, #24]
 8003238:	f8ad 3016 	strh.w	r3, [sp, #22]
 800323c:	4628      	mov	r0, r5
 800323e:	ab21      	add	r3, sp, #132	; 0x84
 8003240:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003242:	a902      	add	r1, sp, #8
 8003244:	9301      	str	r3, [sp, #4]
 8003246:	f000 f869 	bl	800331c <_svfiprintf_r>
 800324a:	1c43      	adds	r3, r0, #1
 800324c:	bfbc      	itt	lt
 800324e:	238b      	movlt	r3, #139	; 0x8b
 8003250:	602b      	strlt	r3, [r5, #0]
 8003252:	2c00      	cmp	r4, #0
 8003254:	d0dd      	beq.n	8003212 <sniprintf+0x16>
 8003256:	2200      	movs	r2, #0
 8003258:	9b02      	ldr	r3, [sp, #8]
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	e7d9      	b.n	8003212 <sniprintf+0x16>
 800325e:	bf00      	nop
 8003260:	20000024 	.word	0x20000024

08003264 <__ssputs_r>:
 8003264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003268:	688e      	ldr	r6, [r1, #8]
 800326a:	4682      	mov	sl, r0
 800326c:	429e      	cmp	r6, r3
 800326e:	460c      	mov	r4, r1
 8003270:	4690      	mov	r8, r2
 8003272:	461f      	mov	r7, r3
 8003274:	d838      	bhi.n	80032e8 <__ssputs_r+0x84>
 8003276:	898a      	ldrh	r2, [r1, #12]
 8003278:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800327c:	d032      	beq.n	80032e4 <__ssputs_r+0x80>
 800327e:	6825      	ldr	r5, [r4, #0]
 8003280:	6909      	ldr	r1, [r1, #16]
 8003282:	3301      	adds	r3, #1
 8003284:	eba5 0901 	sub.w	r9, r5, r1
 8003288:	6965      	ldr	r5, [r4, #20]
 800328a:	444b      	add	r3, r9
 800328c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003290:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003294:	106d      	asrs	r5, r5, #1
 8003296:	429d      	cmp	r5, r3
 8003298:	bf38      	it	cc
 800329a:	461d      	movcc	r5, r3
 800329c:	0553      	lsls	r3, r2, #21
 800329e:	d531      	bpl.n	8003304 <__ssputs_r+0xa0>
 80032a0:	4629      	mov	r1, r5
 80032a2:	f000 fb47 	bl	8003934 <_malloc_r>
 80032a6:	4606      	mov	r6, r0
 80032a8:	b950      	cbnz	r0, 80032c0 <__ssputs_r+0x5c>
 80032aa:	230c      	movs	r3, #12
 80032ac:	f04f 30ff 	mov.w	r0, #4294967295
 80032b0:	f8ca 3000 	str.w	r3, [sl]
 80032b4:	89a3      	ldrh	r3, [r4, #12]
 80032b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032ba:	81a3      	strh	r3, [r4, #12]
 80032bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032c0:	464a      	mov	r2, r9
 80032c2:	6921      	ldr	r1, [r4, #16]
 80032c4:	f7ff ff6a 	bl	800319c <memcpy>
 80032c8:	89a3      	ldrh	r3, [r4, #12]
 80032ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032d2:	81a3      	strh	r3, [r4, #12]
 80032d4:	6126      	str	r6, [r4, #16]
 80032d6:	444e      	add	r6, r9
 80032d8:	6026      	str	r6, [r4, #0]
 80032da:	463e      	mov	r6, r7
 80032dc:	6165      	str	r5, [r4, #20]
 80032de:	eba5 0509 	sub.w	r5, r5, r9
 80032e2:	60a5      	str	r5, [r4, #8]
 80032e4:	42be      	cmp	r6, r7
 80032e6:	d900      	bls.n	80032ea <__ssputs_r+0x86>
 80032e8:	463e      	mov	r6, r7
 80032ea:	4632      	mov	r2, r6
 80032ec:	4641      	mov	r1, r8
 80032ee:	6820      	ldr	r0, [r4, #0]
 80032f0:	f7ff ff62 	bl	80031b8 <memmove>
 80032f4:	68a3      	ldr	r3, [r4, #8]
 80032f6:	2000      	movs	r0, #0
 80032f8:	1b9b      	subs	r3, r3, r6
 80032fa:	60a3      	str	r3, [r4, #8]
 80032fc:	6823      	ldr	r3, [r4, #0]
 80032fe:	4433      	add	r3, r6
 8003300:	6023      	str	r3, [r4, #0]
 8003302:	e7db      	b.n	80032bc <__ssputs_r+0x58>
 8003304:	462a      	mov	r2, r5
 8003306:	f000 fb89 	bl	8003a1c <_realloc_r>
 800330a:	4606      	mov	r6, r0
 800330c:	2800      	cmp	r0, #0
 800330e:	d1e1      	bne.n	80032d4 <__ssputs_r+0x70>
 8003310:	4650      	mov	r0, sl
 8003312:	6921      	ldr	r1, [r4, #16]
 8003314:	f000 faa6 	bl	8003864 <_free_r>
 8003318:	e7c7      	b.n	80032aa <__ssputs_r+0x46>
	...

0800331c <_svfiprintf_r>:
 800331c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003320:	4698      	mov	r8, r3
 8003322:	898b      	ldrh	r3, [r1, #12]
 8003324:	4607      	mov	r7, r0
 8003326:	061b      	lsls	r3, r3, #24
 8003328:	460d      	mov	r5, r1
 800332a:	4614      	mov	r4, r2
 800332c:	b09d      	sub	sp, #116	; 0x74
 800332e:	d50e      	bpl.n	800334e <_svfiprintf_r+0x32>
 8003330:	690b      	ldr	r3, [r1, #16]
 8003332:	b963      	cbnz	r3, 800334e <_svfiprintf_r+0x32>
 8003334:	2140      	movs	r1, #64	; 0x40
 8003336:	f000 fafd 	bl	8003934 <_malloc_r>
 800333a:	6028      	str	r0, [r5, #0]
 800333c:	6128      	str	r0, [r5, #16]
 800333e:	b920      	cbnz	r0, 800334a <_svfiprintf_r+0x2e>
 8003340:	230c      	movs	r3, #12
 8003342:	603b      	str	r3, [r7, #0]
 8003344:	f04f 30ff 	mov.w	r0, #4294967295
 8003348:	e0d1      	b.n	80034ee <_svfiprintf_r+0x1d2>
 800334a:	2340      	movs	r3, #64	; 0x40
 800334c:	616b      	str	r3, [r5, #20]
 800334e:	2300      	movs	r3, #0
 8003350:	9309      	str	r3, [sp, #36]	; 0x24
 8003352:	2320      	movs	r3, #32
 8003354:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003358:	2330      	movs	r3, #48	; 0x30
 800335a:	f04f 0901 	mov.w	r9, #1
 800335e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003362:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003508 <_svfiprintf_r+0x1ec>
 8003366:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800336a:	4623      	mov	r3, r4
 800336c:	469a      	mov	sl, r3
 800336e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003372:	b10a      	cbz	r2, 8003378 <_svfiprintf_r+0x5c>
 8003374:	2a25      	cmp	r2, #37	; 0x25
 8003376:	d1f9      	bne.n	800336c <_svfiprintf_r+0x50>
 8003378:	ebba 0b04 	subs.w	fp, sl, r4
 800337c:	d00b      	beq.n	8003396 <_svfiprintf_r+0x7a>
 800337e:	465b      	mov	r3, fp
 8003380:	4622      	mov	r2, r4
 8003382:	4629      	mov	r1, r5
 8003384:	4638      	mov	r0, r7
 8003386:	f7ff ff6d 	bl	8003264 <__ssputs_r>
 800338a:	3001      	adds	r0, #1
 800338c:	f000 80aa 	beq.w	80034e4 <_svfiprintf_r+0x1c8>
 8003390:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003392:	445a      	add	r2, fp
 8003394:	9209      	str	r2, [sp, #36]	; 0x24
 8003396:	f89a 3000 	ldrb.w	r3, [sl]
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 80a2 	beq.w	80034e4 <_svfiprintf_r+0x1c8>
 80033a0:	2300      	movs	r3, #0
 80033a2:	f04f 32ff 	mov.w	r2, #4294967295
 80033a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033aa:	f10a 0a01 	add.w	sl, sl, #1
 80033ae:	9304      	str	r3, [sp, #16]
 80033b0:	9307      	str	r3, [sp, #28]
 80033b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033b6:	931a      	str	r3, [sp, #104]	; 0x68
 80033b8:	4654      	mov	r4, sl
 80033ba:	2205      	movs	r2, #5
 80033bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033c0:	4851      	ldr	r0, [pc, #324]	; (8003508 <_svfiprintf_r+0x1ec>)
 80033c2:	f000 fa41 	bl	8003848 <memchr>
 80033c6:	9a04      	ldr	r2, [sp, #16]
 80033c8:	b9d8      	cbnz	r0, 8003402 <_svfiprintf_r+0xe6>
 80033ca:	06d0      	lsls	r0, r2, #27
 80033cc:	bf44      	itt	mi
 80033ce:	2320      	movmi	r3, #32
 80033d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033d4:	0711      	lsls	r1, r2, #28
 80033d6:	bf44      	itt	mi
 80033d8:	232b      	movmi	r3, #43	; 0x2b
 80033da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033de:	f89a 3000 	ldrb.w	r3, [sl]
 80033e2:	2b2a      	cmp	r3, #42	; 0x2a
 80033e4:	d015      	beq.n	8003412 <_svfiprintf_r+0xf6>
 80033e6:	4654      	mov	r4, sl
 80033e8:	2000      	movs	r0, #0
 80033ea:	f04f 0c0a 	mov.w	ip, #10
 80033ee:	9a07      	ldr	r2, [sp, #28]
 80033f0:	4621      	mov	r1, r4
 80033f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033f6:	3b30      	subs	r3, #48	; 0x30
 80033f8:	2b09      	cmp	r3, #9
 80033fa:	d94e      	bls.n	800349a <_svfiprintf_r+0x17e>
 80033fc:	b1b0      	cbz	r0, 800342c <_svfiprintf_r+0x110>
 80033fe:	9207      	str	r2, [sp, #28]
 8003400:	e014      	b.n	800342c <_svfiprintf_r+0x110>
 8003402:	eba0 0308 	sub.w	r3, r0, r8
 8003406:	fa09 f303 	lsl.w	r3, r9, r3
 800340a:	4313      	orrs	r3, r2
 800340c:	46a2      	mov	sl, r4
 800340e:	9304      	str	r3, [sp, #16]
 8003410:	e7d2      	b.n	80033b8 <_svfiprintf_r+0x9c>
 8003412:	9b03      	ldr	r3, [sp, #12]
 8003414:	1d19      	adds	r1, r3, #4
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	9103      	str	r1, [sp, #12]
 800341a:	2b00      	cmp	r3, #0
 800341c:	bfbb      	ittet	lt
 800341e:	425b      	neglt	r3, r3
 8003420:	f042 0202 	orrlt.w	r2, r2, #2
 8003424:	9307      	strge	r3, [sp, #28]
 8003426:	9307      	strlt	r3, [sp, #28]
 8003428:	bfb8      	it	lt
 800342a:	9204      	strlt	r2, [sp, #16]
 800342c:	7823      	ldrb	r3, [r4, #0]
 800342e:	2b2e      	cmp	r3, #46	; 0x2e
 8003430:	d10c      	bne.n	800344c <_svfiprintf_r+0x130>
 8003432:	7863      	ldrb	r3, [r4, #1]
 8003434:	2b2a      	cmp	r3, #42	; 0x2a
 8003436:	d135      	bne.n	80034a4 <_svfiprintf_r+0x188>
 8003438:	9b03      	ldr	r3, [sp, #12]
 800343a:	3402      	adds	r4, #2
 800343c:	1d1a      	adds	r2, r3, #4
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	9203      	str	r2, [sp, #12]
 8003442:	2b00      	cmp	r3, #0
 8003444:	bfb8      	it	lt
 8003446:	f04f 33ff 	movlt.w	r3, #4294967295
 800344a:	9305      	str	r3, [sp, #20]
 800344c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800350c <_svfiprintf_r+0x1f0>
 8003450:	2203      	movs	r2, #3
 8003452:	4650      	mov	r0, sl
 8003454:	7821      	ldrb	r1, [r4, #0]
 8003456:	f000 f9f7 	bl	8003848 <memchr>
 800345a:	b140      	cbz	r0, 800346e <_svfiprintf_r+0x152>
 800345c:	2340      	movs	r3, #64	; 0x40
 800345e:	eba0 000a 	sub.w	r0, r0, sl
 8003462:	fa03 f000 	lsl.w	r0, r3, r0
 8003466:	9b04      	ldr	r3, [sp, #16]
 8003468:	3401      	adds	r4, #1
 800346a:	4303      	orrs	r3, r0
 800346c:	9304      	str	r3, [sp, #16]
 800346e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003472:	2206      	movs	r2, #6
 8003474:	4826      	ldr	r0, [pc, #152]	; (8003510 <_svfiprintf_r+0x1f4>)
 8003476:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800347a:	f000 f9e5 	bl	8003848 <memchr>
 800347e:	2800      	cmp	r0, #0
 8003480:	d038      	beq.n	80034f4 <_svfiprintf_r+0x1d8>
 8003482:	4b24      	ldr	r3, [pc, #144]	; (8003514 <_svfiprintf_r+0x1f8>)
 8003484:	bb1b      	cbnz	r3, 80034ce <_svfiprintf_r+0x1b2>
 8003486:	9b03      	ldr	r3, [sp, #12]
 8003488:	3307      	adds	r3, #7
 800348a:	f023 0307 	bic.w	r3, r3, #7
 800348e:	3308      	adds	r3, #8
 8003490:	9303      	str	r3, [sp, #12]
 8003492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003494:	4433      	add	r3, r6
 8003496:	9309      	str	r3, [sp, #36]	; 0x24
 8003498:	e767      	b.n	800336a <_svfiprintf_r+0x4e>
 800349a:	460c      	mov	r4, r1
 800349c:	2001      	movs	r0, #1
 800349e:	fb0c 3202 	mla	r2, ip, r2, r3
 80034a2:	e7a5      	b.n	80033f0 <_svfiprintf_r+0xd4>
 80034a4:	2300      	movs	r3, #0
 80034a6:	f04f 0c0a 	mov.w	ip, #10
 80034aa:	4619      	mov	r1, r3
 80034ac:	3401      	adds	r4, #1
 80034ae:	9305      	str	r3, [sp, #20]
 80034b0:	4620      	mov	r0, r4
 80034b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034b6:	3a30      	subs	r2, #48	; 0x30
 80034b8:	2a09      	cmp	r2, #9
 80034ba:	d903      	bls.n	80034c4 <_svfiprintf_r+0x1a8>
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0c5      	beq.n	800344c <_svfiprintf_r+0x130>
 80034c0:	9105      	str	r1, [sp, #20]
 80034c2:	e7c3      	b.n	800344c <_svfiprintf_r+0x130>
 80034c4:	4604      	mov	r4, r0
 80034c6:	2301      	movs	r3, #1
 80034c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80034cc:	e7f0      	b.n	80034b0 <_svfiprintf_r+0x194>
 80034ce:	ab03      	add	r3, sp, #12
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	462a      	mov	r2, r5
 80034d4:	4638      	mov	r0, r7
 80034d6:	4b10      	ldr	r3, [pc, #64]	; (8003518 <_svfiprintf_r+0x1fc>)
 80034d8:	a904      	add	r1, sp, #16
 80034da:	f3af 8000 	nop.w
 80034de:	1c42      	adds	r2, r0, #1
 80034e0:	4606      	mov	r6, r0
 80034e2:	d1d6      	bne.n	8003492 <_svfiprintf_r+0x176>
 80034e4:	89ab      	ldrh	r3, [r5, #12]
 80034e6:	065b      	lsls	r3, r3, #25
 80034e8:	f53f af2c 	bmi.w	8003344 <_svfiprintf_r+0x28>
 80034ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034ee:	b01d      	add	sp, #116	; 0x74
 80034f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034f4:	ab03      	add	r3, sp, #12
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	462a      	mov	r2, r5
 80034fa:	4638      	mov	r0, r7
 80034fc:	4b06      	ldr	r3, [pc, #24]	; (8003518 <_svfiprintf_r+0x1fc>)
 80034fe:	a904      	add	r1, sp, #16
 8003500:	f000 f87c 	bl	80035fc <_printf_i>
 8003504:	e7eb      	b.n	80034de <_svfiprintf_r+0x1c2>
 8003506:	bf00      	nop
 8003508:	08004ff6 	.word	0x08004ff6
 800350c:	08004ffc 	.word	0x08004ffc
 8003510:	08005000 	.word	0x08005000
 8003514:	00000000 	.word	0x00000000
 8003518:	08003265 	.word	0x08003265

0800351c <_printf_common>:
 800351c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003520:	4616      	mov	r6, r2
 8003522:	4699      	mov	r9, r3
 8003524:	688a      	ldr	r2, [r1, #8]
 8003526:	690b      	ldr	r3, [r1, #16]
 8003528:	4607      	mov	r7, r0
 800352a:	4293      	cmp	r3, r2
 800352c:	bfb8      	it	lt
 800352e:	4613      	movlt	r3, r2
 8003530:	6033      	str	r3, [r6, #0]
 8003532:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003536:	460c      	mov	r4, r1
 8003538:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800353c:	b10a      	cbz	r2, 8003542 <_printf_common+0x26>
 800353e:	3301      	adds	r3, #1
 8003540:	6033      	str	r3, [r6, #0]
 8003542:	6823      	ldr	r3, [r4, #0]
 8003544:	0699      	lsls	r1, r3, #26
 8003546:	bf42      	ittt	mi
 8003548:	6833      	ldrmi	r3, [r6, #0]
 800354a:	3302      	addmi	r3, #2
 800354c:	6033      	strmi	r3, [r6, #0]
 800354e:	6825      	ldr	r5, [r4, #0]
 8003550:	f015 0506 	ands.w	r5, r5, #6
 8003554:	d106      	bne.n	8003564 <_printf_common+0x48>
 8003556:	f104 0a19 	add.w	sl, r4, #25
 800355a:	68e3      	ldr	r3, [r4, #12]
 800355c:	6832      	ldr	r2, [r6, #0]
 800355e:	1a9b      	subs	r3, r3, r2
 8003560:	42ab      	cmp	r3, r5
 8003562:	dc28      	bgt.n	80035b6 <_printf_common+0x9a>
 8003564:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003568:	1e13      	subs	r3, r2, #0
 800356a:	6822      	ldr	r2, [r4, #0]
 800356c:	bf18      	it	ne
 800356e:	2301      	movne	r3, #1
 8003570:	0692      	lsls	r2, r2, #26
 8003572:	d42d      	bmi.n	80035d0 <_printf_common+0xb4>
 8003574:	4649      	mov	r1, r9
 8003576:	4638      	mov	r0, r7
 8003578:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800357c:	47c0      	blx	r8
 800357e:	3001      	adds	r0, #1
 8003580:	d020      	beq.n	80035c4 <_printf_common+0xa8>
 8003582:	6823      	ldr	r3, [r4, #0]
 8003584:	68e5      	ldr	r5, [r4, #12]
 8003586:	f003 0306 	and.w	r3, r3, #6
 800358a:	2b04      	cmp	r3, #4
 800358c:	bf18      	it	ne
 800358e:	2500      	movne	r5, #0
 8003590:	6832      	ldr	r2, [r6, #0]
 8003592:	f04f 0600 	mov.w	r6, #0
 8003596:	68a3      	ldr	r3, [r4, #8]
 8003598:	bf08      	it	eq
 800359a:	1aad      	subeq	r5, r5, r2
 800359c:	6922      	ldr	r2, [r4, #16]
 800359e:	bf08      	it	eq
 80035a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035a4:	4293      	cmp	r3, r2
 80035a6:	bfc4      	itt	gt
 80035a8:	1a9b      	subgt	r3, r3, r2
 80035aa:	18ed      	addgt	r5, r5, r3
 80035ac:	341a      	adds	r4, #26
 80035ae:	42b5      	cmp	r5, r6
 80035b0:	d11a      	bne.n	80035e8 <_printf_common+0xcc>
 80035b2:	2000      	movs	r0, #0
 80035b4:	e008      	b.n	80035c8 <_printf_common+0xac>
 80035b6:	2301      	movs	r3, #1
 80035b8:	4652      	mov	r2, sl
 80035ba:	4649      	mov	r1, r9
 80035bc:	4638      	mov	r0, r7
 80035be:	47c0      	blx	r8
 80035c0:	3001      	adds	r0, #1
 80035c2:	d103      	bne.n	80035cc <_printf_common+0xb0>
 80035c4:	f04f 30ff 	mov.w	r0, #4294967295
 80035c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035cc:	3501      	adds	r5, #1
 80035ce:	e7c4      	b.n	800355a <_printf_common+0x3e>
 80035d0:	2030      	movs	r0, #48	; 0x30
 80035d2:	18e1      	adds	r1, r4, r3
 80035d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035de:	4422      	add	r2, r4
 80035e0:	3302      	adds	r3, #2
 80035e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035e6:	e7c5      	b.n	8003574 <_printf_common+0x58>
 80035e8:	2301      	movs	r3, #1
 80035ea:	4622      	mov	r2, r4
 80035ec:	4649      	mov	r1, r9
 80035ee:	4638      	mov	r0, r7
 80035f0:	47c0      	blx	r8
 80035f2:	3001      	adds	r0, #1
 80035f4:	d0e6      	beq.n	80035c4 <_printf_common+0xa8>
 80035f6:	3601      	adds	r6, #1
 80035f8:	e7d9      	b.n	80035ae <_printf_common+0x92>
	...

080035fc <_printf_i>:
 80035fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003600:	7e0f      	ldrb	r7, [r1, #24]
 8003602:	4691      	mov	r9, r2
 8003604:	2f78      	cmp	r7, #120	; 0x78
 8003606:	4680      	mov	r8, r0
 8003608:	460c      	mov	r4, r1
 800360a:	469a      	mov	sl, r3
 800360c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800360e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003612:	d807      	bhi.n	8003624 <_printf_i+0x28>
 8003614:	2f62      	cmp	r7, #98	; 0x62
 8003616:	d80a      	bhi.n	800362e <_printf_i+0x32>
 8003618:	2f00      	cmp	r7, #0
 800361a:	f000 80d9 	beq.w	80037d0 <_printf_i+0x1d4>
 800361e:	2f58      	cmp	r7, #88	; 0x58
 8003620:	f000 80a4 	beq.w	800376c <_printf_i+0x170>
 8003624:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003628:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800362c:	e03a      	b.n	80036a4 <_printf_i+0xa8>
 800362e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003632:	2b15      	cmp	r3, #21
 8003634:	d8f6      	bhi.n	8003624 <_printf_i+0x28>
 8003636:	a101      	add	r1, pc, #4	; (adr r1, 800363c <_printf_i+0x40>)
 8003638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800363c:	08003695 	.word	0x08003695
 8003640:	080036a9 	.word	0x080036a9
 8003644:	08003625 	.word	0x08003625
 8003648:	08003625 	.word	0x08003625
 800364c:	08003625 	.word	0x08003625
 8003650:	08003625 	.word	0x08003625
 8003654:	080036a9 	.word	0x080036a9
 8003658:	08003625 	.word	0x08003625
 800365c:	08003625 	.word	0x08003625
 8003660:	08003625 	.word	0x08003625
 8003664:	08003625 	.word	0x08003625
 8003668:	080037b7 	.word	0x080037b7
 800366c:	080036d9 	.word	0x080036d9
 8003670:	08003799 	.word	0x08003799
 8003674:	08003625 	.word	0x08003625
 8003678:	08003625 	.word	0x08003625
 800367c:	080037d9 	.word	0x080037d9
 8003680:	08003625 	.word	0x08003625
 8003684:	080036d9 	.word	0x080036d9
 8003688:	08003625 	.word	0x08003625
 800368c:	08003625 	.word	0x08003625
 8003690:	080037a1 	.word	0x080037a1
 8003694:	682b      	ldr	r3, [r5, #0]
 8003696:	1d1a      	adds	r2, r3, #4
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	602a      	str	r2, [r5, #0]
 800369c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036a4:	2301      	movs	r3, #1
 80036a6:	e0a4      	b.n	80037f2 <_printf_i+0x1f6>
 80036a8:	6820      	ldr	r0, [r4, #0]
 80036aa:	6829      	ldr	r1, [r5, #0]
 80036ac:	0606      	lsls	r6, r0, #24
 80036ae:	f101 0304 	add.w	r3, r1, #4
 80036b2:	d50a      	bpl.n	80036ca <_printf_i+0xce>
 80036b4:	680e      	ldr	r6, [r1, #0]
 80036b6:	602b      	str	r3, [r5, #0]
 80036b8:	2e00      	cmp	r6, #0
 80036ba:	da03      	bge.n	80036c4 <_printf_i+0xc8>
 80036bc:	232d      	movs	r3, #45	; 0x2d
 80036be:	4276      	negs	r6, r6
 80036c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036c4:	230a      	movs	r3, #10
 80036c6:	485e      	ldr	r0, [pc, #376]	; (8003840 <_printf_i+0x244>)
 80036c8:	e019      	b.n	80036fe <_printf_i+0x102>
 80036ca:	680e      	ldr	r6, [r1, #0]
 80036cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036d0:	602b      	str	r3, [r5, #0]
 80036d2:	bf18      	it	ne
 80036d4:	b236      	sxthne	r6, r6
 80036d6:	e7ef      	b.n	80036b8 <_printf_i+0xbc>
 80036d8:	682b      	ldr	r3, [r5, #0]
 80036da:	6820      	ldr	r0, [r4, #0]
 80036dc:	1d19      	adds	r1, r3, #4
 80036de:	6029      	str	r1, [r5, #0]
 80036e0:	0601      	lsls	r1, r0, #24
 80036e2:	d501      	bpl.n	80036e8 <_printf_i+0xec>
 80036e4:	681e      	ldr	r6, [r3, #0]
 80036e6:	e002      	b.n	80036ee <_printf_i+0xf2>
 80036e8:	0646      	lsls	r6, r0, #25
 80036ea:	d5fb      	bpl.n	80036e4 <_printf_i+0xe8>
 80036ec:	881e      	ldrh	r6, [r3, #0]
 80036ee:	2f6f      	cmp	r7, #111	; 0x6f
 80036f0:	bf0c      	ite	eq
 80036f2:	2308      	moveq	r3, #8
 80036f4:	230a      	movne	r3, #10
 80036f6:	4852      	ldr	r0, [pc, #328]	; (8003840 <_printf_i+0x244>)
 80036f8:	2100      	movs	r1, #0
 80036fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036fe:	6865      	ldr	r5, [r4, #4]
 8003700:	2d00      	cmp	r5, #0
 8003702:	bfa8      	it	ge
 8003704:	6821      	ldrge	r1, [r4, #0]
 8003706:	60a5      	str	r5, [r4, #8]
 8003708:	bfa4      	itt	ge
 800370a:	f021 0104 	bicge.w	r1, r1, #4
 800370e:	6021      	strge	r1, [r4, #0]
 8003710:	b90e      	cbnz	r6, 8003716 <_printf_i+0x11a>
 8003712:	2d00      	cmp	r5, #0
 8003714:	d04d      	beq.n	80037b2 <_printf_i+0x1b6>
 8003716:	4615      	mov	r5, r2
 8003718:	fbb6 f1f3 	udiv	r1, r6, r3
 800371c:	fb03 6711 	mls	r7, r3, r1, r6
 8003720:	5dc7      	ldrb	r7, [r0, r7]
 8003722:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003726:	4637      	mov	r7, r6
 8003728:	42bb      	cmp	r3, r7
 800372a:	460e      	mov	r6, r1
 800372c:	d9f4      	bls.n	8003718 <_printf_i+0x11c>
 800372e:	2b08      	cmp	r3, #8
 8003730:	d10b      	bne.n	800374a <_printf_i+0x14e>
 8003732:	6823      	ldr	r3, [r4, #0]
 8003734:	07de      	lsls	r6, r3, #31
 8003736:	d508      	bpl.n	800374a <_printf_i+0x14e>
 8003738:	6923      	ldr	r3, [r4, #16]
 800373a:	6861      	ldr	r1, [r4, #4]
 800373c:	4299      	cmp	r1, r3
 800373e:	bfde      	ittt	le
 8003740:	2330      	movle	r3, #48	; 0x30
 8003742:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003746:	f105 35ff 	addle.w	r5, r5, #4294967295
 800374a:	1b52      	subs	r2, r2, r5
 800374c:	6122      	str	r2, [r4, #16]
 800374e:	464b      	mov	r3, r9
 8003750:	4621      	mov	r1, r4
 8003752:	4640      	mov	r0, r8
 8003754:	f8cd a000 	str.w	sl, [sp]
 8003758:	aa03      	add	r2, sp, #12
 800375a:	f7ff fedf 	bl	800351c <_printf_common>
 800375e:	3001      	adds	r0, #1
 8003760:	d14c      	bne.n	80037fc <_printf_i+0x200>
 8003762:	f04f 30ff 	mov.w	r0, #4294967295
 8003766:	b004      	add	sp, #16
 8003768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800376c:	4834      	ldr	r0, [pc, #208]	; (8003840 <_printf_i+0x244>)
 800376e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003772:	6829      	ldr	r1, [r5, #0]
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	f851 6b04 	ldr.w	r6, [r1], #4
 800377a:	6029      	str	r1, [r5, #0]
 800377c:	061d      	lsls	r5, r3, #24
 800377e:	d514      	bpl.n	80037aa <_printf_i+0x1ae>
 8003780:	07df      	lsls	r7, r3, #31
 8003782:	bf44      	itt	mi
 8003784:	f043 0320 	orrmi.w	r3, r3, #32
 8003788:	6023      	strmi	r3, [r4, #0]
 800378a:	b91e      	cbnz	r6, 8003794 <_printf_i+0x198>
 800378c:	6823      	ldr	r3, [r4, #0]
 800378e:	f023 0320 	bic.w	r3, r3, #32
 8003792:	6023      	str	r3, [r4, #0]
 8003794:	2310      	movs	r3, #16
 8003796:	e7af      	b.n	80036f8 <_printf_i+0xfc>
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	f043 0320 	orr.w	r3, r3, #32
 800379e:	6023      	str	r3, [r4, #0]
 80037a0:	2378      	movs	r3, #120	; 0x78
 80037a2:	4828      	ldr	r0, [pc, #160]	; (8003844 <_printf_i+0x248>)
 80037a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037a8:	e7e3      	b.n	8003772 <_printf_i+0x176>
 80037aa:	0659      	lsls	r1, r3, #25
 80037ac:	bf48      	it	mi
 80037ae:	b2b6      	uxthmi	r6, r6
 80037b0:	e7e6      	b.n	8003780 <_printf_i+0x184>
 80037b2:	4615      	mov	r5, r2
 80037b4:	e7bb      	b.n	800372e <_printf_i+0x132>
 80037b6:	682b      	ldr	r3, [r5, #0]
 80037b8:	6826      	ldr	r6, [r4, #0]
 80037ba:	1d18      	adds	r0, r3, #4
 80037bc:	6961      	ldr	r1, [r4, #20]
 80037be:	6028      	str	r0, [r5, #0]
 80037c0:	0635      	lsls	r5, r6, #24
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	d501      	bpl.n	80037ca <_printf_i+0x1ce>
 80037c6:	6019      	str	r1, [r3, #0]
 80037c8:	e002      	b.n	80037d0 <_printf_i+0x1d4>
 80037ca:	0670      	lsls	r0, r6, #25
 80037cc:	d5fb      	bpl.n	80037c6 <_printf_i+0x1ca>
 80037ce:	8019      	strh	r1, [r3, #0]
 80037d0:	2300      	movs	r3, #0
 80037d2:	4615      	mov	r5, r2
 80037d4:	6123      	str	r3, [r4, #16]
 80037d6:	e7ba      	b.n	800374e <_printf_i+0x152>
 80037d8:	682b      	ldr	r3, [r5, #0]
 80037da:	2100      	movs	r1, #0
 80037dc:	1d1a      	adds	r2, r3, #4
 80037de:	602a      	str	r2, [r5, #0]
 80037e0:	681d      	ldr	r5, [r3, #0]
 80037e2:	6862      	ldr	r2, [r4, #4]
 80037e4:	4628      	mov	r0, r5
 80037e6:	f000 f82f 	bl	8003848 <memchr>
 80037ea:	b108      	cbz	r0, 80037f0 <_printf_i+0x1f4>
 80037ec:	1b40      	subs	r0, r0, r5
 80037ee:	6060      	str	r0, [r4, #4]
 80037f0:	6863      	ldr	r3, [r4, #4]
 80037f2:	6123      	str	r3, [r4, #16]
 80037f4:	2300      	movs	r3, #0
 80037f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037fa:	e7a8      	b.n	800374e <_printf_i+0x152>
 80037fc:	462a      	mov	r2, r5
 80037fe:	4649      	mov	r1, r9
 8003800:	4640      	mov	r0, r8
 8003802:	6923      	ldr	r3, [r4, #16]
 8003804:	47d0      	blx	sl
 8003806:	3001      	adds	r0, #1
 8003808:	d0ab      	beq.n	8003762 <_printf_i+0x166>
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	079b      	lsls	r3, r3, #30
 800380e:	d413      	bmi.n	8003838 <_printf_i+0x23c>
 8003810:	68e0      	ldr	r0, [r4, #12]
 8003812:	9b03      	ldr	r3, [sp, #12]
 8003814:	4298      	cmp	r0, r3
 8003816:	bfb8      	it	lt
 8003818:	4618      	movlt	r0, r3
 800381a:	e7a4      	b.n	8003766 <_printf_i+0x16a>
 800381c:	2301      	movs	r3, #1
 800381e:	4632      	mov	r2, r6
 8003820:	4649      	mov	r1, r9
 8003822:	4640      	mov	r0, r8
 8003824:	47d0      	blx	sl
 8003826:	3001      	adds	r0, #1
 8003828:	d09b      	beq.n	8003762 <_printf_i+0x166>
 800382a:	3501      	adds	r5, #1
 800382c:	68e3      	ldr	r3, [r4, #12]
 800382e:	9903      	ldr	r1, [sp, #12]
 8003830:	1a5b      	subs	r3, r3, r1
 8003832:	42ab      	cmp	r3, r5
 8003834:	dcf2      	bgt.n	800381c <_printf_i+0x220>
 8003836:	e7eb      	b.n	8003810 <_printf_i+0x214>
 8003838:	2500      	movs	r5, #0
 800383a:	f104 0619 	add.w	r6, r4, #25
 800383e:	e7f5      	b.n	800382c <_printf_i+0x230>
 8003840:	08005007 	.word	0x08005007
 8003844:	08005018 	.word	0x08005018

08003848 <memchr>:
 8003848:	4603      	mov	r3, r0
 800384a:	b510      	push	{r4, lr}
 800384c:	b2c9      	uxtb	r1, r1
 800384e:	4402      	add	r2, r0
 8003850:	4293      	cmp	r3, r2
 8003852:	4618      	mov	r0, r3
 8003854:	d101      	bne.n	800385a <memchr+0x12>
 8003856:	2000      	movs	r0, #0
 8003858:	e003      	b.n	8003862 <memchr+0x1a>
 800385a:	7804      	ldrb	r4, [r0, #0]
 800385c:	3301      	adds	r3, #1
 800385e:	428c      	cmp	r4, r1
 8003860:	d1f6      	bne.n	8003850 <memchr+0x8>
 8003862:	bd10      	pop	{r4, pc}

08003864 <_free_r>:
 8003864:	b538      	push	{r3, r4, r5, lr}
 8003866:	4605      	mov	r5, r0
 8003868:	2900      	cmp	r1, #0
 800386a:	d040      	beq.n	80038ee <_free_r+0x8a>
 800386c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003870:	1f0c      	subs	r4, r1, #4
 8003872:	2b00      	cmp	r3, #0
 8003874:	bfb8      	it	lt
 8003876:	18e4      	addlt	r4, r4, r3
 8003878:	f000 f910 	bl	8003a9c <__malloc_lock>
 800387c:	4a1c      	ldr	r2, [pc, #112]	; (80038f0 <_free_r+0x8c>)
 800387e:	6813      	ldr	r3, [r2, #0]
 8003880:	b933      	cbnz	r3, 8003890 <_free_r+0x2c>
 8003882:	6063      	str	r3, [r4, #4]
 8003884:	6014      	str	r4, [r2, #0]
 8003886:	4628      	mov	r0, r5
 8003888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800388c:	f000 b90c 	b.w	8003aa8 <__malloc_unlock>
 8003890:	42a3      	cmp	r3, r4
 8003892:	d908      	bls.n	80038a6 <_free_r+0x42>
 8003894:	6820      	ldr	r0, [r4, #0]
 8003896:	1821      	adds	r1, r4, r0
 8003898:	428b      	cmp	r3, r1
 800389a:	bf01      	itttt	eq
 800389c:	6819      	ldreq	r1, [r3, #0]
 800389e:	685b      	ldreq	r3, [r3, #4]
 80038a0:	1809      	addeq	r1, r1, r0
 80038a2:	6021      	streq	r1, [r4, #0]
 80038a4:	e7ed      	b.n	8003882 <_free_r+0x1e>
 80038a6:	461a      	mov	r2, r3
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	b10b      	cbz	r3, 80038b0 <_free_r+0x4c>
 80038ac:	42a3      	cmp	r3, r4
 80038ae:	d9fa      	bls.n	80038a6 <_free_r+0x42>
 80038b0:	6811      	ldr	r1, [r2, #0]
 80038b2:	1850      	adds	r0, r2, r1
 80038b4:	42a0      	cmp	r0, r4
 80038b6:	d10b      	bne.n	80038d0 <_free_r+0x6c>
 80038b8:	6820      	ldr	r0, [r4, #0]
 80038ba:	4401      	add	r1, r0
 80038bc:	1850      	adds	r0, r2, r1
 80038be:	4283      	cmp	r3, r0
 80038c0:	6011      	str	r1, [r2, #0]
 80038c2:	d1e0      	bne.n	8003886 <_free_r+0x22>
 80038c4:	6818      	ldr	r0, [r3, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	4401      	add	r1, r0
 80038ca:	6011      	str	r1, [r2, #0]
 80038cc:	6053      	str	r3, [r2, #4]
 80038ce:	e7da      	b.n	8003886 <_free_r+0x22>
 80038d0:	d902      	bls.n	80038d8 <_free_r+0x74>
 80038d2:	230c      	movs	r3, #12
 80038d4:	602b      	str	r3, [r5, #0]
 80038d6:	e7d6      	b.n	8003886 <_free_r+0x22>
 80038d8:	6820      	ldr	r0, [r4, #0]
 80038da:	1821      	adds	r1, r4, r0
 80038dc:	428b      	cmp	r3, r1
 80038de:	bf01      	itttt	eq
 80038e0:	6819      	ldreq	r1, [r3, #0]
 80038e2:	685b      	ldreq	r3, [r3, #4]
 80038e4:	1809      	addeq	r1, r1, r0
 80038e6:	6021      	streq	r1, [r4, #0]
 80038e8:	6063      	str	r3, [r4, #4]
 80038ea:	6054      	str	r4, [r2, #4]
 80038ec:	e7cb      	b.n	8003886 <_free_r+0x22>
 80038ee:	bd38      	pop	{r3, r4, r5, pc}
 80038f0:	20000598 	.word	0x20000598

080038f4 <sbrk_aligned>:
 80038f4:	b570      	push	{r4, r5, r6, lr}
 80038f6:	4e0e      	ldr	r6, [pc, #56]	; (8003930 <sbrk_aligned+0x3c>)
 80038f8:	460c      	mov	r4, r1
 80038fa:	6831      	ldr	r1, [r6, #0]
 80038fc:	4605      	mov	r5, r0
 80038fe:	b911      	cbnz	r1, 8003906 <sbrk_aligned+0x12>
 8003900:	f000 f8bc 	bl	8003a7c <_sbrk_r>
 8003904:	6030      	str	r0, [r6, #0]
 8003906:	4621      	mov	r1, r4
 8003908:	4628      	mov	r0, r5
 800390a:	f000 f8b7 	bl	8003a7c <_sbrk_r>
 800390e:	1c43      	adds	r3, r0, #1
 8003910:	d00a      	beq.n	8003928 <sbrk_aligned+0x34>
 8003912:	1cc4      	adds	r4, r0, #3
 8003914:	f024 0403 	bic.w	r4, r4, #3
 8003918:	42a0      	cmp	r0, r4
 800391a:	d007      	beq.n	800392c <sbrk_aligned+0x38>
 800391c:	1a21      	subs	r1, r4, r0
 800391e:	4628      	mov	r0, r5
 8003920:	f000 f8ac 	bl	8003a7c <_sbrk_r>
 8003924:	3001      	adds	r0, #1
 8003926:	d101      	bne.n	800392c <sbrk_aligned+0x38>
 8003928:	f04f 34ff 	mov.w	r4, #4294967295
 800392c:	4620      	mov	r0, r4
 800392e:	bd70      	pop	{r4, r5, r6, pc}
 8003930:	2000059c 	.word	0x2000059c

08003934 <_malloc_r>:
 8003934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003938:	1ccd      	adds	r5, r1, #3
 800393a:	f025 0503 	bic.w	r5, r5, #3
 800393e:	3508      	adds	r5, #8
 8003940:	2d0c      	cmp	r5, #12
 8003942:	bf38      	it	cc
 8003944:	250c      	movcc	r5, #12
 8003946:	2d00      	cmp	r5, #0
 8003948:	4607      	mov	r7, r0
 800394a:	db01      	blt.n	8003950 <_malloc_r+0x1c>
 800394c:	42a9      	cmp	r1, r5
 800394e:	d905      	bls.n	800395c <_malloc_r+0x28>
 8003950:	230c      	movs	r3, #12
 8003952:	2600      	movs	r6, #0
 8003954:	603b      	str	r3, [r7, #0]
 8003956:	4630      	mov	r0, r6
 8003958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800395c:	4e2e      	ldr	r6, [pc, #184]	; (8003a18 <_malloc_r+0xe4>)
 800395e:	f000 f89d 	bl	8003a9c <__malloc_lock>
 8003962:	6833      	ldr	r3, [r6, #0]
 8003964:	461c      	mov	r4, r3
 8003966:	bb34      	cbnz	r4, 80039b6 <_malloc_r+0x82>
 8003968:	4629      	mov	r1, r5
 800396a:	4638      	mov	r0, r7
 800396c:	f7ff ffc2 	bl	80038f4 <sbrk_aligned>
 8003970:	1c43      	adds	r3, r0, #1
 8003972:	4604      	mov	r4, r0
 8003974:	d14d      	bne.n	8003a12 <_malloc_r+0xde>
 8003976:	6834      	ldr	r4, [r6, #0]
 8003978:	4626      	mov	r6, r4
 800397a:	2e00      	cmp	r6, #0
 800397c:	d140      	bne.n	8003a00 <_malloc_r+0xcc>
 800397e:	6823      	ldr	r3, [r4, #0]
 8003980:	4631      	mov	r1, r6
 8003982:	4638      	mov	r0, r7
 8003984:	eb04 0803 	add.w	r8, r4, r3
 8003988:	f000 f878 	bl	8003a7c <_sbrk_r>
 800398c:	4580      	cmp	r8, r0
 800398e:	d13a      	bne.n	8003a06 <_malloc_r+0xd2>
 8003990:	6821      	ldr	r1, [r4, #0]
 8003992:	3503      	adds	r5, #3
 8003994:	1a6d      	subs	r5, r5, r1
 8003996:	f025 0503 	bic.w	r5, r5, #3
 800399a:	3508      	adds	r5, #8
 800399c:	2d0c      	cmp	r5, #12
 800399e:	bf38      	it	cc
 80039a0:	250c      	movcc	r5, #12
 80039a2:	4638      	mov	r0, r7
 80039a4:	4629      	mov	r1, r5
 80039a6:	f7ff ffa5 	bl	80038f4 <sbrk_aligned>
 80039aa:	3001      	adds	r0, #1
 80039ac:	d02b      	beq.n	8003a06 <_malloc_r+0xd2>
 80039ae:	6823      	ldr	r3, [r4, #0]
 80039b0:	442b      	add	r3, r5
 80039b2:	6023      	str	r3, [r4, #0]
 80039b4:	e00e      	b.n	80039d4 <_malloc_r+0xa0>
 80039b6:	6822      	ldr	r2, [r4, #0]
 80039b8:	1b52      	subs	r2, r2, r5
 80039ba:	d41e      	bmi.n	80039fa <_malloc_r+0xc6>
 80039bc:	2a0b      	cmp	r2, #11
 80039be:	d916      	bls.n	80039ee <_malloc_r+0xba>
 80039c0:	1961      	adds	r1, r4, r5
 80039c2:	42a3      	cmp	r3, r4
 80039c4:	6025      	str	r5, [r4, #0]
 80039c6:	bf18      	it	ne
 80039c8:	6059      	strne	r1, [r3, #4]
 80039ca:	6863      	ldr	r3, [r4, #4]
 80039cc:	bf08      	it	eq
 80039ce:	6031      	streq	r1, [r6, #0]
 80039d0:	5162      	str	r2, [r4, r5]
 80039d2:	604b      	str	r3, [r1, #4]
 80039d4:	4638      	mov	r0, r7
 80039d6:	f104 060b 	add.w	r6, r4, #11
 80039da:	f000 f865 	bl	8003aa8 <__malloc_unlock>
 80039de:	f026 0607 	bic.w	r6, r6, #7
 80039e2:	1d23      	adds	r3, r4, #4
 80039e4:	1af2      	subs	r2, r6, r3
 80039e6:	d0b6      	beq.n	8003956 <_malloc_r+0x22>
 80039e8:	1b9b      	subs	r3, r3, r6
 80039ea:	50a3      	str	r3, [r4, r2]
 80039ec:	e7b3      	b.n	8003956 <_malloc_r+0x22>
 80039ee:	6862      	ldr	r2, [r4, #4]
 80039f0:	42a3      	cmp	r3, r4
 80039f2:	bf0c      	ite	eq
 80039f4:	6032      	streq	r2, [r6, #0]
 80039f6:	605a      	strne	r2, [r3, #4]
 80039f8:	e7ec      	b.n	80039d4 <_malloc_r+0xa0>
 80039fa:	4623      	mov	r3, r4
 80039fc:	6864      	ldr	r4, [r4, #4]
 80039fe:	e7b2      	b.n	8003966 <_malloc_r+0x32>
 8003a00:	4634      	mov	r4, r6
 8003a02:	6876      	ldr	r6, [r6, #4]
 8003a04:	e7b9      	b.n	800397a <_malloc_r+0x46>
 8003a06:	230c      	movs	r3, #12
 8003a08:	4638      	mov	r0, r7
 8003a0a:	603b      	str	r3, [r7, #0]
 8003a0c:	f000 f84c 	bl	8003aa8 <__malloc_unlock>
 8003a10:	e7a1      	b.n	8003956 <_malloc_r+0x22>
 8003a12:	6025      	str	r5, [r4, #0]
 8003a14:	e7de      	b.n	80039d4 <_malloc_r+0xa0>
 8003a16:	bf00      	nop
 8003a18:	20000598 	.word	0x20000598

08003a1c <_realloc_r>:
 8003a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a20:	4680      	mov	r8, r0
 8003a22:	4614      	mov	r4, r2
 8003a24:	460e      	mov	r6, r1
 8003a26:	b921      	cbnz	r1, 8003a32 <_realloc_r+0x16>
 8003a28:	4611      	mov	r1, r2
 8003a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a2e:	f7ff bf81 	b.w	8003934 <_malloc_r>
 8003a32:	b92a      	cbnz	r2, 8003a40 <_realloc_r+0x24>
 8003a34:	f7ff ff16 	bl	8003864 <_free_r>
 8003a38:	4625      	mov	r5, r4
 8003a3a:	4628      	mov	r0, r5
 8003a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a40:	f000 f838 	bl	8003ab4 <_malloc_usable_size_r>
 8003a44:	4284      	cmp	r4, r0
 8003a46:	4607      	mov	r7, r0
 8003a48:	d802      	bhi.n	8003a50 <_realloc_r+0x34>
 8003a4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003a4e:	d812      	bhi.n	8003a76 <_realloc_r+0x5a>
 8003a50:	4621      	mov	r1, r4
 8003a52:	4640      	mov	r0, r8
 8003a54:	f7ff ff6e 	bl	8003934 <_malloc_r>
 8003a58:	4605      	mov	r5, r0
 8003a5a:	2800      	cmp	r0, #0
 8003a5c:	d0ed      	beq.n	8003a3a <_realloc_r+0x1e>
 8003a5e:	42bc      	cmp	r4, r7
 8003a60:	4622      	mov	r2, r4
 8003a62:	4631      	mov	r1, r6
 8003a64:	bf28      	it	cs
 8003a66:	463a      	movcs	r2, r7
 8003a68:	f7ff fb98 	bl	800319c <memcpy>
 8003a6c:	4631      	mov	r1, r6
 8003a6e:	4640      	mov	r0, r8
 8003a70:	f7ff fef8 	bl	8003864 <_free_r>
 8003a74:	e7e1      	b.n	8003a3a <_realloc_r+0x1e>
 8003a76:	4635      	mov	r5, r6
 8003a78:	e7df      	b.n	8003a3a <_realloc_r+0x1e>
	...

08003a7c <_sbrk_r>:
 8003a7c:	b538      	push	{r3, r4, r5, lr}
 8003a7e:	2300      	movs	r3, #0
 8003a80:	4d05      	ldr	r5, [pc, #20]	; (8003a98 <_sbrk_r+0x1c>)
 8003a82:	4604      	mov	r4, r0
 8003a84:	4608      	mov	r0, r1
 8003a86:	602b      	str	r3, [r5, #0]
 8003a88:	f7fd f920 	bl	8000ccc <_sbrk>
 8003a8c:	1c43      	adds	r3, r0, #1
 8003a8e:	d102      	bne.n	8003a96 <_sbrk_r+0x1a>
 8003a90:	682b      	ldr	r3, [r5, #0]
 8003a92:	b103      	cbz	r3, 8003a96 <_sbrk_r+0x1a>
 8003a94:	6023      	str	r3, [r4, #0]
 8003a96:	bd38      	pop	{r3, r4, r5, pc}
 8003a98:	200005a0 	.word	0x200005a0

08003a9c <__malloc_lock>:
 8003a9c:	4801      	ldr	r0, [pc, #4]	; (8003aa4 <__malloc_lock+0x8>)
 8003a9e:	f000 b811 	b.w	8003ac4 <__retarget_lock_acquire_recursive>
 8003aa2:	bf00      	nop
 8003aa4:	200005a4 	.word	0x200005a4

08003aa8 <__malloc_unlock>:
 8003aa8:	4801      	ldr	r0, [pc, #4]	; (8003ab0 <__malloc_unlock+0x8>)
 8003aaa:	f000 b80c 	b.w	8003ac6 <__retarget_lock_release_recursive>
 8003aae:	bf00      	nop
 8003ab0:	200005a4 	.word	0x200005a4

08003ab4 <_malloc_usable_size_r>:
 8003ab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ab8:	1f18      	subs	r0, r3, #4
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	bfbc      	itt	lt
 8003abe:	580b      	ldrlt	r3, [r1, r0]
 8003ac0:	18c0      	addlt	r0, r0, r3
 8003ac2:	4770      	bx	lr

08003ac4 <__retarget_lock_acquire_recursive>:
 8003ac4:	4770      	bx	lr

08003ac6 <__retarget_lock_release_recursive>:
 8003ac6:	4770      	bx	lr

08003ac8 <_init>:
 8003ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aca:	bf00      	nop
 8003acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ace:	bc08      	pop	{r3}
 8003ad0:	469e      	mov	lr, r3
 8003ad2:	4770      	bx	lr

08003ad4 <_fini>:
 8003ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad6:	bf00      	nop
 8003ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ada:	bc08      	pop	{r3}
 8003adc:	469e      	mov	lr, r3
 8003ade:	4770      	bx	lr
